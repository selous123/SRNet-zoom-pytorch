RCAN 8X model
RCAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
      (4): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/15906]	[L1: 30.1256]	37.2+1.0s
[3200/15906]	[L1: 27.7990]	36.6+0.1s
[4800/15906]	[L1: 26.6260]	36.9+0.1s
[6400/15906]	[L1: 25.9963]	36.6+0.1s
[8000/15906]	[L1: 25.5126]	36.6+0.1s
[9600/15906]	[L1: 25.0699]	36.9+0.1s
[11200/15906]	[L1: 24.7953]	36.1+0.1s
[12800/15906]	[L1: 24.5853]	36.6+0.1s
[14400/15906]	[L1: 24.3951]	37.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.219 (Best: 16.219 @epoch 1)
Forward: 2.38s

Saving...
Total: 4.75s

[Epoch 2]	Learning rate: 1.00e-4
[1600/15906]	[L1: 23.4644]	37.0+1.0s
[3200/15906]	[L1: 23.3860]	36.5+0.1s
[4800/15906]	[L1: 23.1809]	36.7+0.1s
[6400/15906]	[L1: 23.0424]	37.1+0.1s
[8000/15906]	[L1: 22.9097]	36.9+0.1s
[9600/15906]	[L1: 22.9365]	37.3+0.1s
[11200/15906]	[L1: 22.9281]	36.7+0.1s
[12800/15906]	[L1: 22.9289]	36.4+0.1s
[14400/15906]	[L1: 22.9226]	37.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.151 (Best: 16.219 @epoch 1)
Forward: 1.87s

Saving...
Total: 4.26s

[Epoch 3]	Learning rate: 1.00e-4
[1600/15906]	[L1: 22.8958]	37.3+1.0s
[3200/15906]	[L1: 22.7763]	37.2+0.1s
[4800/15906]	[L1: 22.6317]	36.6+0.1s
[6400/15906]	[L1: 22.6000]	36.4+0.1s
[8000/15906]	[L1: 22.5501]	37.2+0.1s
[9600/15906]	[L1: 22.4828]	37.3+0.1s
[11200/15906]	[L1: 22.3746]	37.4+0.1s
[12800/15906]	[L1: 22.4036]	37.5+0.1s
[14400/15906]	[L1: 22.3924]	36.5+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.317 (Best: 16.317 @epoch 3)
Forward: 1.95s

Saving...
Total: 5.36s

[Epoch 4]	Learning rate: 1.00e-4
[1600/15906]	[L1: 22.3493]	37.2+0.9s
[3200/15906]	[L1: 22.8115]	36.7+0.1s
[4800/15906]	[L1: 22.4581]	37.0+0.1s
[6400/15906]	[L1: 22.5926]	37.6+0.2s
[8000/15906]	[L1: 22.5246]	37.4+0.1s
[9600/15906]	[L1: 22.4791]	36.9+0.1s
[11200/15906]	[L1: 22.3674]	36.9+0.1s
[12800/15906]	[L1: 22.3904]	36.8+0.1s
[14400/15906]	[L1: 22.3990]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.207 (Best: 16.317 @epoch 3)
Forward: 1.76s

Saving...
Total: 5.10s

[Epoch 5]	Learning rate: 1.00e-4
[1600/15906]	[L1: 22.6015]	37.9+0.9s
[3200/15906]	[L1: 22.4878]	37.2+0.1s
[4800/15906]	[L1: 22.4509]	37.5+0.1s
[6400/15906]	[L1: 22.5404]	36.9+0.1s
[8000/15906]	[L1: 22.4229]	37.0+0.1s
[9600/15906]	[L1: 22.5453]	37.2+0.1s
[11200/15906]	[L1: 22.5182]	37.3+0.1s
[12800/15906]	[L1: 22.4036]	36.8+0.1s
[14400/15906]	[L1: 22.4099]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.290 (Best: 16.317 @epoch 3)
Forward: 2.09s

Saving...
Total: 5.45s

[Epoch 6]	Learning rate: 1.00e-4
[1600/15906]	[L1: 22.2343]	37.3+0.8s
[3200/15906]	[L1: 22.1634]	36.7+0.1s
[4800/15906]	[L1: 22.1256]	36.4+0.1s
[6400/15906]	[L1: 22.0372]	36.8+0.1s
[8000/15906]	[L1: 22.0789]	37.2+0.1s
[9600/15906]	[L1: 22.0225]	36.7+0.1s
[11200/15906]	[L1: 22.0513]	37.0+0.1s
[12800/15906]	[L1: 22.0803]	37.7+0.1s
[14400/15906]	[L1: 22.1610]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.474 (Best: 16.474 @epoch 6)
Forward: 2.11s

Saving...
Total: 5.51s

[Epoch 7]	Learning rate: 1.00e-4
[1600/15906]	[L1: 21.3167]	37.2+1.0s
[3200/15906]	[L1: 21.6223]	36.4+0.1s
[4800/15906]	[L1: 21.8509]	38.4+0.1s
[6400/15906]	[L1: 21.8990]	36.1+0.1s
[8000/15906]	[L1: 21.9225]	37.2+0.1s
[9600/15906]	[L1: 21.9806]	36.5+0.1s
[11200/15906]	[L1: 21.9830]	36.5+0.1s
[12800/15906]	[L1: 21.9754]	37.0+0.1s
[14400/15906]	[L1: 21.9644]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 15.866 (Best: 16.474 @epoch 6)
Forward: 1.85s

Saving...
Total: 5.21s

[Epoch 8]	Learning rate: 1.00e-4
[1600/15906]	[L1: 22.1624]	37.0+1.2s
[3200/15906]	[L1: 21.8346]	37.4+0.1s
[4800/15906]	[L1: 21.7730]	36.2+0.1s
[6400/15906]	[L1: 21.8352]	36.9+0.1s
[8000/15906]	[L1: 21.8650]	36.9+0.1s
[9600/15906]	[L1: 21.9391]	37.0+0.1s
[11200/15906]	[L1: 21.9026]	36.9+0.1s
[12800/15906]	[L1: 21.8960]	37.1+0.1s
[14400/15906]	[L1: 21.9008]	36.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.618 (Best: 16.618 @epoch 8)
Forward: 1.94s

Saving...
Total: 5.39s

[Epoch 9]	Learning rate: 1.00e-4
[1600/15906]	[L1: 21.8140]	36.9+1.0s
[3200/15906]	[L1: 21.7181]	36.4+0.1s
[4800/15906]	[L1: 21.7158]	37.0+0.1s
[6400/15906]	[L1: 21.7640]	37.0+0.1s
[8000/15906]	[L1: 21.8508]	37.2+0.1s
[9600/15906]	[L1: 21.8388]	36.7+0.1s
[11200/15906]	[L1: 21.7844]	36.8+0.1s
[12800/15906]	[L1: 21.8031]	37.4+0.1s
[14400/15906]	[L1: 21.8333]	36.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.115 (Best: 16.618 @epoch 8)
Forward: 2.10s

Saving...
Total: 5.47s

[Epoch 10]	Learning rate: 1.00e-4
[1600/15906]	[L1: 22.0123]	36.9+1.1s
[3200/15906]	[L1: 21.6955]	36.9+0.1s
[4800/15906]	[L1: 21.7487]	36.6+0.1s
[6400/15906]	[L1: 21.6626]	36.1+0.1s
[8000/15906]	[L1: 21.6981]	37.1+0.1s
[9600/15906]	[L1: 21.6925]	36.9+0.1s
[11200/15906]	[L1: 21.6429]	37.2+0.1s
[12800/15906]	[L1: 21.6215]	37.0+0.1s
[14400/15906]	[L1: 21.6291]	36.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.304 (Best: 16.618 @epoch 8)
Forward: 2.02s

Saving...
Total: 6.35s

[Epoch 11]	Learning rate: 1.00e-4
[1600/15906]	[L1: 21.2942]	37.1+1.1s
[3200/15906]	[L1: 21.3657]	36.7+0.1s
[4800/15906]	[L1: 21.4006]	36.5+0.1s
[6400/15906]	[L1: 21.5288]	36.3+0.1s
[8000/15906]	[L1: 21.4827]	36.7+0.1s
[9600/15906]	[L1: 21.5985]	37.2+0.1s
[11200/15906]	[L1: 21.5514]	37.2+0.1s
[12800/15906]	[L1: 21.5717]	37.0+0.1s
[14400/15906]	[L1: 21.5459]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 15.858 (Best: 16.618 @epoch 8)
Forward: 1.98s

Saving...
Total: 5.33s

[Epoch 12]	Learning rate: 1.00e-4
[1600/15906]	[L1: 21.1826]	37.2+0.9s
[3200/15906]	[L1: 21.2680]	37.2+0.1s
[4800/15906]	[L1: 21.4352]	36.4+0.1s
[6400/15906]	[L1: 21.3679]	36.9+0.1s
[8000/15906]	[L1: 21.3162]	36.8+0.1s
[9600/15906]	[L1: 21.2708]	36.9+0.1s
[11200/15906]	[L1: 21.3194]	36.4+0.1s
[12800/15906]	[L1: 21.2767]	36.8+0.1s
[14400/15906]	[L1: 21.2917]	37.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.154 (Best: 16.618 @epoch 8)
Forward: 2.16s

Saving...
Total: 5.55s

[Epoch 13]	Learning rate: 1.00e-4
[1600/15906]	[L1: 21.2399]	37.4+0.9s
[3200/15906]	[L1: 21.2847]	36.4+0.1s
[4800/15906]	[L1: 21.2416]	36.6+0.1s
[6400/15906]	[L1: 21.2102]	36.9+0.1s
[8000/15906]	[L1: 21.2545]	37.9+0.1s
[9600/15906]	[L1: 21.4235]	36.4+0.1s
[11200/15906]	[L1: 21.4116]	36.8+0.1s
[12800/15906]	[L1: 21.2744]	37.1+0.1s
[14400/15906]	[L1: 21.2968]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.883 (Best: 16.883 @epoch 13)
Forward: 2.04s

Saving...
Total: 5.43s

[Epoch 14]	Learning rate: 1.00e-4
[1600/15906]	[L1: 20.8920]	37.5+0.9s
[3200/15906]	[L1: 21.2276]	36.9+0.1s
[4800/15906]	[L1: 21.1962]	36.7+0.1s
[6400/15906]	[L1: 21.1026]	36.6+0.1s
[8000/15906]	[L1: 21.0672]	36.5+0.1s
[9600/15906]	[L1: 21.0670]	37.3+0.1s
[11200/15906]	[L1: 21.0856]	36.7+0.1s
[12800/15906]	[L1: 21.0722]	36.5+0.1s
[14400/15906]	[L1: 21.1612]	36.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.429 (Best: 16.883 @epoch 13)
Forward: 2.10s

Saving...
Total: 5.50s

[Epoch 15]	Learning rate: 1.00e-4
[1600/15906]	[L1: 20.9170]	36.6+1.2s
[3200/15906]	[L1: 21.1938]	36.4+0.1s
[4800/15906]	[L1: 21.3129]	37.3+0.1s
[6400/15906]	[L1: 21.2765]	36.9+0.1s
[8000/15906]	[L1: 21.1959]	36.7+0.1s
[9600/15906]	[L1: 21.1397]	36.8+0.1s
[11200/15906]	[L1: 21.0842]	36.9+0.1s
[12800/15906]	[L1: 21.0469]	36.8+0.1s
[14400/15906]	[L1: 20.9913]	37.5+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.666 (Best: 16.883 @epoch 13)
Forward: 1.77s

Saving...
Total: 6.13s

[Epoch 16]	Learning rate: 1.00e-4
[1600/15906]	[L1: 20.5993]	37.1+0.8s
[3200/15906]	[L1: 20.6651]	37.9+0.1s
[4800/15906]	[L1: 20.8906]	36.5+0.1s
[6400/15906]	[L1: 20.8433]	37.1+0.1s
[8000/15906]	[L1: 20.7743]	36.7+0.1s
[9600/15906]	[L1: 20.7564]	37.8+0.1s
[11200/15906]	[L1: 20.7552]	37.3+0.1s
[12800/15906]	[L1: 20.7757]	36.9+0.1s
[14400/15906]	[L1: 20.8476]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.612 (Best: 16.883 @epoch 13)
Forward: 2.11s

Saving...
Total: 5.49s

[Epoch 17]	Learning rate: 1.00e-4
[1600/15906]	[L1: 20.2615]	37.0+0.8s
[3200/15906]	[L1: 20.8459]	36.7+0.1s
[4800/15906]	[L1: 20.7652]	37.1+0.1s
[6400/15906]	[L1: 20.6884]	37.6+0.1s
[8000/15906]	[L1: 20.6995]	36.7+0.1s
[9600/15906]	[L1: 20.5847]	37.2+0.1s
[11200/15906]	[L1: 20.6268]	36.3+0.1s
[12800/15906]	[L1: 20.6552]	37.1+0.1s
[14400/15906]	[L1: 20.6275]	36.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.207 (Best: 16.883 @epoch 13)
Forward: 2.04s

Saving...
Total: 6.43s

[Epoch 18]	Learning rate: 1.00e-4
[1600/15906]	[L1: 21.1147]	36.5+0.9s
[3200/15906]	[L1: 20.9674]	36.8+0.1s
[4800/15906]	[L1: 20.9478]	36.5+0.1s
[6400/15906]	[L1: 20.9570]	37.6+0.1s
[8000/15906]	[L1: 20.7718]	36.6+0.1s
[9600/15906]	[L1: 20.6930]	36.4+0.1s
[11200/15906]	[L1: 20.6242]	36.6+0.1s
[12800/15906]	[L1: 20.5654]	37.0+0.1s
[14400/15906]	[L1: 20.5247]	37.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.451 (Best: 16.883 @epoch 13)
Forward: 1.67s

Saving...
Total: 6.04s

[Epoch 19]	Learning rate: 1.00e-4
[1600/15906]	[L1: 20.9590]	37.2+0.9s
[3200/15906]	[L1: 20.8937]	37.1+0.1s
[4800/15906]	[L1: 20.7537]	36.7+0.1s
[6400/15906]	[L1: 20.6959]	36.5+0.1s
[8000/15906]	[L1: 20.6054]	37.3+0.1s
[9600/15906]	[L1: 20.6417]	36.9+0.1s
[11200/15906]	[L1: 20.6572]	37.0+0.1s
[12800/15906]	[L1: 20.6831]	36.4+0.1s
[14400/15906]	[L1: 20.6660]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.624 (Best: 16.883 @epoch 13)
Forward: 2.13s

Saving...
Total: 6.49s

[Epoch 20]	Learning rate: 1.00e-4
[1600/15906]	[L1: 20.9866]	36.4+1.0s
[3200/15906]	[L1: 20.8163]	36.3+0.1s
[4800/15906]	[L1: 20.7226]	36.4+0.1s
[6400/15906]	[L1: 20.4901]	37.2+0.1s
[8000/15906]	[L1: 20.4201]	37.4+0.1s
[9600/15906]	[L1: 20.3952]	36.6+0.1s
[11200/15906]	[L1: 20.4545]	36.8+0.1s
[12800/15906]	[L1: 20.4191]	37.3+0.1s
[14400/15906]	[L1: 20.4509]	36.4+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.629 (Best: 16.883 @epoch 13)
Forward: 1.98s

Saving...
Total: 5.38s

[Epoch 21]	Learning rate: 1.00e-4
[1600/15906]	[L1: 19.7065]	37.5+0.8s
[3200/15906]	[L1: 19.9389]	36.8+0.1s
[4800/15906]	[L1: 20.0973]	36.8+0.1s
[6400/15906]	[L1: 20.0160]	36.5+0.1s
[8000/15906]	[L1: 20.0442]	36.5+0.1s
[9600/15906]	[L1: 20.1829]	37.1+0.1s
[11200/15906]	[L1: 20.0826]	36.8+0.1s
[12800/15906]	[L1: 20.1340]	36.5+0.1s
[14400/15906]	[L1: 20.1584]	36.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.230 (Best: 16.883 @epoch 13)
Forward: 2.03s

Saving...
Total: 6.40s

[Epoch 22]	Learning rate: 1.00e-4
[1600/15906]	[L1: 20.0456]	37.5+0.9s
[3200/15906]	[L1: 19.9950]	36.9+0.1s
[4800/15906]	[L1: 19.9642]	36.9+0.1s
[6400/15906]	[L1: 19.9643]	37.4+0.1s
[8000/15906]	[L1: 20.0829]	36.4+0.1s
[9600/15906]	[L1: 20.0951]	37.3+0.1s
[11200/15906]	[L1: 20.0831]	36.9+0.1s
[12800/15906]	[L1: 20.1231]	36.4+0.1s
[14400/15906]	[L1: 20.2057]	37.5+0.1s

Evaluation:
[SRRAW x8]	PSNR: 15.688 (Best: 16.883 @epoch 13)
Forward: 2.16s

Saving...
Total: 6.54s

[Epoch 23]	Learning rate: 1.00e-4
[1600/15906]	[L1: 20.3741]	37.8+0.9s
[3200/15906]	[L1: 20.0723]	36.3+0.1s
[4800/15906]	[L1: 20.0123]	36.3+0.1s
[6400/15906]	[L1: 19.9936]	36.4+0.1s
[8000/15906]	[L1: 19.9432]	37.3+0.1s
[9600/15906]	[L1: 20.1199]	36.9+0.1s
[11200/15906]	[L1: 20.0329]	36.8+0.1s
[12800/15906]	[L1: 20.0338]	36.8+0.1s
[14400/15906]	[L1: 20.0342]	37.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.286 (Best: 16.883 @epoch 13)
Forward: 2.03s

Saving...
Total: 6.38s

[Epoch 24]	Learning rate: 1.00e-4
[1600/15906]	[L1: 20.4341]	37.3+0.9s
[3200/15906]	[L1: 20.0645]	36.4+0.1s
[4800/15906]	[L1: 19.8773]	37.3+0.1s
[6400/15906]	[L1: 19.9812]	36.9+0.1s
[8000/15906]	[L1: 20.0409]	36.7+0.1s
[9600/15906]	[L1: 19.9495]	36.9+0.1s
[11200/15906]	[L1: 19.9259]	37.0+0.1s
[12800/15906]	[L1: 19.8278]	36.6+0.2s
[14400/15906]	[L1: 19.8154]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.550 (Best: 16.883 @epoch 13)
Forward: 2.15s

Saving...
Total: 6.50s

[Epoch 25]	Learning rate: 1.00e-4
[1600/15906]	[L1: 20.1021]	36.9+1.0s
[3200/15906]	[L1: 19.9408]	36.9+0.1s
[4800/15906]	[L1: 19.8110]	37.2+0.1s
[6400/15906]	[L1: 19.9186]	36.5+0.1s
[8000/15906]	[L1: 19.8944]	36.8+0.1s
[9600/15906]	[L1: 19.9431]	36.6+0.1s
[11200/15906]	[L1: 19.9854]	36.7+0.1s
[12800/15906]	[L1: 19.9444]	36.8+0.1s
[14400/15906]	[L1: 19.9431]	36.4+0.1s

Evaluation:
[SRRAW x8]	PSNR: 15.943 (Best: 16.883 @epoch 13)
Forward: 2.02s

Saving...
Total: 6.40s

[Epoch 26]	Learning rate: 1.00e-4
[1600/15906]	[L1: 19.5224]	37.1+1.1s
[3200/15906]	[L1: 19.6684]	36.4+0.1s
[4800/15906]	[L1: 19.6238]	36.7+0.1s
[6400/15906]	[L1: 19.7311]	36.8+0.1s
[8000/15906]	[L1: 19.8020]	36.3+0.1s
[9600/15906]	[L1: 19.8291]	36.6+0.1s
[11200/15906]	[L1: 19.7418]	36.7+0.1s
[12800/15906]	[L1: 19.7613]	37.0+0.1s
[14400/15906]	[L1: 19.7491]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.224 (Best: 17.224 @epoch 26)
Forward: 2.09s

Saving...
Total: 6.52s

[Epoch 27]	Learning rate: 1.00e-4
[1600/15906]	[L1: 19.5308]	37.2+1.0s
[3200/15906]	[L1: 19.3256]	36.9+0.1s
[4800/15906]	[L1: 19.4590]	37.2+0.1s
[6400/15906]	[L1: 19.6138]	36.9+0.1s
[8000/15906]	[L1: 19.5983]	37.0+0.1s
[9600/15906]	[L1: 19.6457]	36.2+0.1s
[11200/15906]	[L1: 19.6562]	36.3+0.1s
[12800/15906]	[L1: 19.7370]	36.3+0.1s
[14400/15906]	[L1: 19.7328]	36.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.141 (Best: 17.224 @epoch 26)
Forward: 1.97s

Saving...
Total: 6.36s

[Epoch 28]	Learning rate: 1.00e-4
[1600/15906]	[L1: 19.9277]	36.6+0.9s
[3200/15906]	[L1: 19.7517]	36.8+0.1s
[4800/15906]	[L1: 19.6330]	36.6+0.1s
[6400/15906]	[L1: 19.6310]	36.2+0.1s
[8000/15906]	[L1: 19.5870]	37.1+0.1s
[9600/15906]	[L1: 19.6174]	37.4+0.1s
[11200/15906]	[L1: 19.6447]	36.7+0.1s
[12800/15906]	[L1: 19.6547]	36.8+0.1s
[14400/15906]	[L1: 19.7214]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.814 (Best: 17.224 @epoch 26)
Forward: 1.96s

Saving...
Total: 6.32s

[Epoch 29]	Learning rate: 1.00e-4
[1600/15906]	[L1: 19.2397]	38.1+0.9s
[3200/15906]	[L1: 19.5344]	36.2+0.1s
[4800/15906]	[L1: 19.6843]	36.6+0.1s
[6400/15906]	[L1: 19.6473]	36.9+0.1s
[8000/15906]	[L1: 19.5727]	37.1+0.1s
[9600/15906]	[L1: 19.6633]	36.6+0.1s
[11200/15906]	[L1: 19.6523]	37.1+0.1s
[12800/15906]	[L1: 19.6235]	37.3+0.1s
[14400/15906]	[L1: 19.5958]	36.5+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.078 (Best: 17.224 @epoch 26)
Forward: 2.09s

Saving...
Total: 6.44s

[Epoch 30]	Learning rate: 1.00e-4
[1600/15906]	[L1: 19.1438]	37.4+0.8s
[3200/15906]	[L1: 19.5251]	36.5+0.1s
[4800/15906]	[L1: 19.4800]	37.8+0.1s
[6400/15906]	[L1: 19.5666]	36.9+0.1s
[8000/15906]	[L1: 19.5090]	36.7+0.1s
[9600/15906]	[L1: 19.5200]	37.0+0.1s
[11200/15906]	[L1: 19.4517]	36.2+0.1s
[12800/15906]	[L1: 19.4543]	36.5+0.1s
[14400/15906]	[L1: 19.4193]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.886 (Best: 17.224 @epoch 26)
Forward: 2.05s

Saving...
Total: 6.44s

[Epoch 31]	Learning rate: 1.00e-4
[1600/15906]	[L1: 19.0279]	37.5+1.0s
[3200/15906]	[L1: 19.6036]	36.3+0.1s
[4800/15906]	[L1: 19.6975]	36.9+0.1s
[6400/15906]	[L1: 19.7355]	37.3+0.1s
[8000/15906]	[L1: 19.6284]	36.7+0.1s
[9600/15906]	[L1: 19.6792]	36.7+0.1s
[11200/15906]	[L1: 19.6030]	36.9+0.1s
[12800/15906]	[L1: 19.6155]	36.9+0.1s
[14400/15906]	[L1: 19.6324]	36.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.313 (Best: 17.224 @epoch 26)
Forward: 1.93s

Saving...
Total: 6.29s

[Epoch 32]	Learning rate: 1.00e-4
[1600/15906]	[L1: 20.0703]	37.3+1.0s
[3200/15906]	[L1: 19.7934]	37.1+0.1s
[4800/15906]	[L1: 19.8031]	36.6+0.1s
[6400/15906]	[L1: 19.6844]	37.1+0.1s
[8000/15906]	[L1: 19.7699]	36.3+0.2s
[9600/15906]	[L1: 19.6771]	36.7+0.1s
[11200/15906]	[L1: 19.6541]	36.6+0.1s
[12800/15906]	[L1: 19.6049]	36.6+0.1s
[14400/15906]	[L1: 19.5644]	36.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.754 (Best: 17.224 @epoch 26)
Forward: 2.20s

Saving...
Total: 6.59s

[Epoch 33]	Learning rate: 1.00e-4
[1600/15906]	[L1: 19.7332]	37.4+0.7s
[3200/15906]	[L1: 19.4943]	36.3+0.1s
[4800/15906]	[L1: 19.4201]	37.0+0.1s
[6400/15906]	[L1: 19.4094]	36.7+0.1s
[8000/15906]	[L1: 19.4079]	36.8+0.1s
[9600/15906]	[L1: 19.4090]	36.4+0.1s
[11200/15906]	[L1: 19.3634]	37.2+0.1s
[12800/15906]	[L1: 19.3564]	37.5+0.1s
[14400/15906]	[L1: 19.3965]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.492 (Best: 17.224 @epoch 26)
Forward: 1.98s

Saving...
Total: 6.34s

[Epoch 34]	Learning rate: 1.00e-4
[1600/15906]	[L1: 19.6106]	37.5+0.9s
[3200/15906]	[L1: 19.1594]	36.3+0.1s
[4800/15906]	[L1: 19.2065]	36.4+0.1s
[6400/15906]	[L1: 19.1840]	36.7+0.1s
[8000/15906]	[L1: 19.2830]	36.5+0.1s
[9600/15906]	[L1: 19.2823]	36.1+0.1s
[11200/15906]	[L1: 19.2638]	37.2+0.1s
[12800/15906]	[L1: 19.1753]	37.0+0.1s
[14400/15906]	[L1: 19.1615]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.463 (Best: 17.224 @epoch 26)
Forward: 2.05s

Saving...
Total: 6.41s

[Epoch 35]	Learning rate: 1.00e-4
[1600/15906]	[L1: 19.4030]	37.2+1.0s
[3200/15906]	[L1: 19.3362]	37.0+0.1s
[4800/15906]	[L1: 19.1581]	36.8+0.1s
[6400/15906]	[L1: 19.1979]	36.5+0.1s
[8000/15906]	[L1: 19.0957]	37.0+0.1s
[9600/15906]	[L1: 19.1867]	36.5+0.1s
[11200/15906]	[L1: 19.2132]	36.1+0.1s
[12800/15906]	[L1: 19.1973]	37.5+0.1s
[14400/15906]	[L1: 19.2097]	36.5+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.967 (Best: 17.224 @epoch 26)
Forward: 1.91s

Saving...
Total: 6.31s

[Epoch 36]	Learning rate: 1.00e-4
[1600/15906]	[L1: 19.8687]	37.4+0.9s
[3200/15906]	[L1: 19.3209]	37.6+0.1s
[4800/15906]	[L1: 19.4355]	36.6+0.1s
[6400/15906]	[L1: 19.5294]	36.8+0.1s
[8000/15906]	[L1: 19.2847]	36.7+0.1s
[9600/15906]	[L1: 19.2016]	36.3+0.1s
[11200/15906]	[L1: 19.1724]	36.3+0.1s
[12800/15906]	[L1: 19.2316]	37.7+0.1s
[14400/15906]	[L1: 19.2454]	37.6+0.2s

Evaluation:
[SRRAW x8]	PSNR: 16.957 (Best: 17.224 @epoch 26)
Forward: 1.89s

Saving...
Total: 6.25s

[Epoch 37]	Learning rate: 1.00e-4
[1600/15906]	[L1: 18.5321]	37.3+1.1s
[3200/15906]	[L1: 18.8559]	36.3+0.1s
[4800/15906]	[L1: 18.9329]	36.8+0.1s
[6400/15906]	[L1: 18.8845]	36.8+0.1s
[8000/15906]	[L1: 18.8518]	36.7+0.1s
[9600/15906]	[L1: 18.9546]	37.0+0.1s
[11200/15906]	[L1: 18.9581]	37.2+0.1s
[12800/15906]	[L1: 19.0363]	36.8+0.2s
[14400/15906]	[L1: 19.0212]	36.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.753 (Best: 17.224 @epoch 26)
Forward: 2.17s

Saving...
Total: 6.53s

[Epoch 38]	Learning rate: 1.00e-4
[1600/15906]	[L1: 19.2657]	37.3+1.0s
[3200/15906]	[L1: 19.2475]	37.1+0.1s
[4800/15906]	[L1: 19.2425]	36.9+0.1s
[6400/15906]	[L1: 19.0298]	36.9+0.2s
[8000/15906]	[L1: 19.0187]	36.9+0.1s
[9600/15906]	[L1: 18.9515]	37.4+0.1s
[11200/15906]	[L1: 18.9967]	37.6+0.1s
[12800/15906]	[L1: 18.9641]	36.3+0.1s
[14400/15906]	[L1: 18.9718]	37.7+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.286 (Best: 17.224 @epoch 26)
Forward: 2.00s

Saving...
Total: 6.40s

[Epoch 39]	Learning rate: 1.00e-4
[1600/15906]	[L1: 19.0455]	37.8+0.9s
[3200/15906]	[L1: 19.2034]	36.2+0.1s
[4800/15906]	[L1: 19.1529]	37.0+0.1s
[6400/15906]	[L1: 19.2133]	37.1+0.1s
[8000/15906]	[L1: 19.2989]	36.4+0.1s
[9600/15906]	[L1: 19.2013]	37.3+0.1s
[11200/15906]	[L1: 19.2124]	36.1+0.1s
[12800/15906]	[L1: 19.0874]	37.1+0.1s
[14400/15906]	[L1: 19.0387]	37.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.342 (Best: 17.224 @epoch 26)
Forward: 2.02s

Saving...
Total: 6.40s

[Epoch 40]	Learning rate: 1.00e-4
[1600/15906]	[L1: 19.0140]	36.6+0.9s
[3200/15906]	[L1: 19.1031]	36.7+0.1s
[4800/15906]	[L1: 19.1438]	37.4+0.1s
[6400/15906]	[L1: 19.1072]	37.0+0.1s
[8000/15906]	[L1: 19.0373]	36.6+0.1s
[9600/15906]	[L1: 19.0270]	37.0+0.1s
[11200/15906]	[L1: 19.0654]	36.7+0.1s
[12800/15906]	[L1: 19.0600]	37.1+0.1s
[14400/15906]	[L1: 19.0130]	36.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.943 (Best: 17.224 @epoch 26)
Forward: 2.12s

Saving...
Total: 6.54s

[Epoch 41]	Learning rate: 1.00e-4
[1600/15906]	[L1: 19.1114]	37.1+1.0s
[3200/15906]	[L1: 18.7348]	36.9+0.1s
[4800/15906]	[L1: 18.7516]	36.7+0.1s
[6400/15906]	[L1: 18.8585]	36.7+0.1s
[8000/15906]	[L1: 18.8831]	36.9+0.1s
[9600/15906]	[L1: 18.9420]	37.1+0.1s
[11200/15906]	[L1: 19.0496]	36.8+0.1s
[12800/15906]	[L1: 19.0317]	36.8+0.1s
[14400/15906]	[L1: 19.0551]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.816 (Best: 17.224 @epoch 26)
Forward: 2.15s

Saving...
Total: 6.52s

[Epoch 42]	Learning rate: 1.00e-4
[1600/15906]	[L1: 18.7373]	37.0+1.1s
[3200/15906]	[L1: 18.8103]	37.5+0.1s
[4800/15906]	[L1: 18.9643]	37.3+0.1s
[6400/15906]	[L1: 18.9629]	37.1+0.1s
[8000/15906]	[L1: 18.8583]	37.2+0.1s
[9600/15906]	[L1: 18.6948]	37.0+0.2s
[11200/15906]	[L1: 18.6738]	37.5+0.1s
[12800/15906]	[L1: 18.7283]	37.0+0.1s
[14400/15906]	[L1: 18.7318]	36.7+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.826 (Best: 17.224 @epoch 26)
Forward: 2.08s

Saving...
Total: 6.44s

[Epoch 43]	Learning rate: 1.00e-4
[1600/15906]	[L1: 18.8962]	36.6+1.0s
[3200/15906]	[L1: 18.9688]	36.6+0.1s
[4800/15906]	[L1: 18.9353]	36.6+0.2s
[6400/15906]	[L1: 18.9326]	36.7+0.1s
[8000/15906]	[L1: 18.7834]	37.2+0.1s
[9600/15906]	[L1: 18.7348]	37.2+0.1s
[11200/15906]	[L1: 18.8092]	37.2+0.1s
[12800/15906]	[L1: 18.8006]	36.5+0.1s
[14400/15906]	[L1: 18.8074]	36.7+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.167 (Best: 17.224 @epoch 26)
Forward: 2.06s

Saving...
Total: 6.46s

[Epoch 44]	Learning rate: 1.00e-4
[1600/15906]	[L1: 18.8942]	37.6+0.9s
[3200/15906]	[L1: 19.1205]	36.6+0.1s
[4800/15906]	[L1: 19.1025]	37.0+0.1s
[6400/15906]	[L1: 18.9333]	36.7+0.1s
[8000/15906]	[L1: 18.9474]	36.9+0.1s
[9600/15906]	[L1: 18.8115]	37.2+0.1s
[11200/15906]	[L1: 18.8341]	37.4+0.1s
[12800/15906]	[L1: 18.7383]	36.9+0.1s
[14400/15906]	[L1: 18.6662]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.892 (Best: 17.224 @epoch 26)
Forward: 2.03s

Saving...
Total: 6.39s

[Epoch 45]	Learning rate: 1.00e-4
[1600/15906]	[L1: 18.8635]	37.2+1.0s
[3200/15906]	[L1: 18.7916]	36.5+0.1s
[4800/15906]	[L1: 18.5651]	37.0+0.1s
[6400/15906]	[L1: 18.4852]	37.0+0.1s
[8000/15906]	[L1: 18.5014]	36.5+0.1s
[9600/15906]	[L1: 18.4863]	36.6+0.1s
[11200/15906]	[L1: 18.4687]	36.4+0.1s
[12800/15906]	[L1: 18.5291]	36.9+0.1s
[14400/15906]	[L1: 18.5322]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.264 (Best: 17.264 @epoch 45)
Forward: 1.96s

Saving...
Total: 6.42s

[Epoch 46]	Learning rate: 1.00e-4
[1600/15906]	[L1: 18.9759]	37.4+0.9s
[3200/15906]	[L1: 18.7026]	36.9+0.1s
[4800/15906]	[L1: 18.6700]	36.2+0.1s
[6400/15906]	[L1: 18.7461]	36.2+0.1s
[8000/15906]	[L1: 18.7522]	36.8+0.1s
[9600/15906]	[L1: 18.7152]	36.4+0.1s
[11200/15906]	[L1: 18.6084]	36.5+0.1s
[12800/15906]	[L1: 18.5868]	37.7+0.1s
[14400/15906]	[L1: 18.5355]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.608 (Best: 17.264 @epoch 45)
Forward: 2.07s

Saving...
Total: 6.43s

[Epoch 47]	Learning rate: 1.00e-4
[1600/15906]	[L1: 18.4693]	37.4+0.9s
[3200/15906]	[L1: 18.6689]	36.9+0.1s
[4800/15906]	[L1: 18.7419]	36.3+0.1s
[6400/15906]	[L1: 18.7504]	36.4+0.1s
[8000/15906]	[L1: 18.6867]	36.9+0.1s
[9600/15906]	[L1: 18.6540]	37.7+0.1s
[11200/15906]	[L1: 18.6151]	36.8+0.1s
[12800/15906]	[L1: 18.5823]	36.9+0.1s
[14400/15906]	[L1: 18.5579]	37.5+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.600 (Best: 17.600 @epoch 47)
Forward: 2.01s

Saving...
Total: 6.46s

[Epoch 48]	Learning rate: 1.00e-4
[1600/15906]	[L1: 18.2194]	36.9+1.0s
[3200/15906]	[L1: 18.6148]	36.4+0.1s
[4800/15906]	[L1: 18.6016]	37.4+0.1s
[6400/15906]	[L1: 18.6978]	36.4+0.1s
[8000/15906]	[L1: 18.7739]	36.4+0.1s
[9600/15906]	[L1: 18.6790]	37.3+0.1s
[11200/15906]	[L1: 18.5723]	36.7+0.1s
[12800/15906]	[L1: 18.4908]	36.9+0.1s
[14400/15906]	[L1: 18.4855]	37.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.830 (Best: 17.600 @epoch 47)
Forward: 2.11s

Saving...
Total: 6.51s

[Epoch 49]	Learning rate: 1.00e-4
[1600/15906]	[L1: 19.0668]	36.5+1.1s
[3200/15906]	[L1: 18.6695]	37.0+0.1s
[4800/15906]	[L1: 18.5555]	36.8+0.1s
[6400/15906]	[L1: 18.4530]	37.4+0.1s
[8000/15906]	[L1: 18.4788]	36.9+0.2s
[9600/15906]	[L1: 18.4313]	37.2+0.2s
[11200/15906]	[L1: 18.4631]	36.5+0.1s
[12800/15906]	[L1: 18.4585]	37.1+0.1s
[14400/15906]	[L1: 18.4654]	37.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.838 (Best: 17.600 @epoch 47)
Forward: 1.89s

Saving...
Total: 6.27s

[Epoch 50]	Learning rate: 1.00e-4
[1600/15906]	[L1: 18.4875]	36.8+1.1s
[3200/15906]	[L1: 18.5986]	36.5+0.1s
[4800/15906]	[L1: 18.5409]	36.8+0.1s
[6400/15906]	[L1: 18.6707]	36.4+0.1s
[8000/15906]	[L1: 18.6424]	37.1+0.1s
[9600/15906]	[L1: 18.5886]	37.3+0.1s
[11200/15906]	[L1: 18.5766]	37.1+0.1s
[12800/15906]	[L1: 18.5669]	37.3+0.1s
[14400/15906]	[L1: 18.5418]	36.5+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.156 (Best: 17.600 @epoch 47)
Forward: 2.04s

Saving...
Total: 6.43s

[Epoch 51]	Learning rate: 2.50e-5
[1600/15906]	[L1: 18.7472]	37.6+0.9s
[3200/15906]	[L1: 18.1508]	37.1+0.1s
[4800/15906]	[L1: 17.9620]	36.9+0.1s
[6400/15906]	[L1: 17.7430]	36.5+0.1s
[8000/15906]	[L1: 17.7330]	36.7+0.1s
[9600/15906]	[L1: 17.6209]	36.8+0.1s
[11200/15906]	[L1: 17.5692]	36.5+0.1s
[12800/15906]	[L1: 17.5959]	37.2+0.1s
[14400/15906]	[L1: 17.6162]	36.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.970 (Best: 17.600 @epoch 47)
Forward: 1.96s

Saving...
Total: 6.33s

[Epoch 52]	Learning rate: 5.00e-5
[1600/15906]	[L1: 17.6085]	37.5+1.1s
[3200/15906]	[L1: 17.4910]	36.5+0.1s
[4800/15906]	[L1: 17.3481]	36.8+0.1s
[6400/15906]	[L1: 17.4042]	37.1+0.1s
[8000/15906]	[L1: 17.4466]	36.6+0.1s
[9600/15906]	[L1: 17.3244]	36.7+0.1s
[11200/15906]	[L1: 17.4065]	36.7+0.1s
[12800/15906]	[L1: 17.4166]	37.3+0.1s
[14400/15906]	[L1: 17.3634]	36.7+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.133 (Best: 17.600 @epoch 47)
Forward: 2.05s

Saving...
Total: 6.54s

[Epoch 53]	Learning rate: 5.00e-5
[1600/15906]	[L1: 17.2206]	36.5+0.8s
[3200/15906]	[L1: 17.3538]	36.6+0.1s
[4800/15906]	[L1: 17.2704]	37.2+0.1s
[6400/15906]	[L1: 17.3036]	36.5+0.1s
[8000/15906]	[L1: 17.3332]	36.9+0.1s
[9600/15906]	[L1: 17.2743]	36.9+0.1s
[11200/15906]	[L1: 17.2639]	36.9+0.1s
[12800/15906]	[L1: 17.2686]	36.3+0.1s
[14400/15906]	[L1: 17.2906]	36.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.144 (Best: 17.600 @epoch 47)
Forward: 2.50s

Saving...
Total: 6.92s

[Epoch 54]	Learning rate: 5.00e-5
[1600/15906]	[L1: 17.8902]	37.8+1.0s
[3200/15906]	[L1: 17.4278]	36.8+0.1s
[4800/15906]	[L1: 17.4618]	36.7+0.1s
[6400/15906]	[L1: 17.3710]	36.8+0.1s
[8000/15906]	[L1: 17.1472]	37.2+0.1s
[9600/15906]	[L1: 17.1158]	36.7+0.1s
[11200/15906]	[L1: 17.1074]	36.7+0.1s
[12800/15906]	[L1: 17.1151]	37.4+0.1s
[14400/15906]	[L1: 17.1055]	36.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.916 (Best: 17.600 @epoch 47)
Forward: 1.72s

Saving...
Total: 5.11s

[Epoch 55]	Learning rate: 5.00e-5
[1600/15906]	[L1: 17.2269]	37.4+0.9s
[3200/15906]	[L1: 17.0464]	37.3+0.1s
[4800/15906]	[L1: 17.1801]	37.0+0.1s
[6400/15906]	[L1: 17.1772]	36.8+0.1s
[8000/15906]	[L1: 17.1590]	37.3+0.1s
[9600/15906]	[L1: 17.1408]	36.5+0.1s
[11200/15906]	[L1: 17.1260]	36.5+0.1s
[12800/15906]	[L1: 17.0766]	37.4+0.1s
[14400/15906]	[L1: 17.1746]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.803 (Best: 17.600 @epoch 47)
Forward: 2.13s

Saving...
Total: 5.51s

[Epoch 56]	Learning rate: 5.00e-5
[1600/15906]	[L1: 17.4913]	37.1+1.0s
[3200/15906]	[L1: 17.4110]	37.0+0.1s
[4800/15906]	[L1: 17.2923]	37.1+0.1s
[6400/15906]	[L1: 17.2289]	38.0+0.1s
[8000/15906]	[L1: 17.2053]	36.8+0.1s
[9600/15906]	[L1: 17.1135]	36.7+0.1s
[11200/15906]	[L1: 17.0733]	36.6+0.1s
[12800/15906]	[L1: 17.1108]	36.5+0.1s
[14400/15906]	[L1: 17.0837]	37.4+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.067 (Best: 17.600 @epoch 47)
Forward: 1.91s

Saving...
Total: 6.35s

[Epoch 57]	Learning rate: 5.00e-5
[1600/15906]	[L1: 17.1542]	36.9+0.9s
[3200/15906]	[L1: 16.8407]	37.2+0.1s
[4800/15906]	[L1: 16.8736]	36.9+0.1s
[6400/15906]	[L1: 16.9223]	37.0+0.1s
[8000/15906]	[L1: 16.9253]	36.7+0.1s
[9600/15906]	[L1: 16.9904]	36.5+0.1s
[11200/15906]	[L1: 16.9790]	36.7+0.1s
[12800/15906]	[L1: 16.9492]	36.6+0.1s
[14400/15906]	[L1: 16.9432]	37.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.122 (Best: 17.600 @epoch 47)
Forward: 1.88s

Saving...
Total: 5.24s

[Epoch 58]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.3982]	37.6+1.0s
[3200/15906]	[L1: 16.9458]	36.9+0.1s
[4800/15906]	[L1: 17.0036]	37.1+0.1s
[6400/15906]	[L1: 16.9375]	36.8+0.1s
[8000/15906]	[L1: 17.0530]	36.9+0.1s
[9600/15906]	[L1: 17.0580]	36.8+0.1s
[11200/15906]	[L1: 17.0681]	36.3+0.1s
[12800/15906]	[L1: 17.0454]	36.5+0.1s
[14400/15906]	[L1: 17.0752]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.038 (Best: 17.600 @epoch 47)
Forward: 2.09s

Saving...
Total: 5.50s

[Epoch 59]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.8500]	36.9+1.0s
[3200/15906]	[L1: 17.0523]	36.9+0.1s
[4800/15906]	[L1: 17.1818]	38.0+0.1s
[6400/15906]	[L1: 17.1147]	36.9+0.1s
[8000/15906]	[L1: 16.9717]	36.5+0.1s
[9600/15906]	[L1: 16.9842]	36.1+0.1s
[11200/15906]	[L1: 16.9596]	36.8+0.1s
[12800/15906]	[L1: 16.8670]	36.4+0.1s
[14400/15906]	[L1: 16.8750]	37.7+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.350 (Best: 17.600 @epoch 47)
Forward: 1.96s

Saving...
Total: 5.33s

[Epoch 60]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.4272]	37.3+1.0s
[3200/15906]	[L1: 16.8160]	36.9+0.1s
[4800/15906]	[L1: 16.8510]	37.1+0.1s
[6400/15906]	[L1: 16.9720]	37.2+0.1s
[8000/15906]	[L1: 16.9687]	36.6+0.1s
[9600/15906]	[L1: 16.9340]	36.6+0.1s
[11200/15906]	[L1: 16.9659]	37.1+0.1s
[12800/15906]	[L1: 16.8993]	36.7+0.1s
[14400/15906]	[L1: 16.9304]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.224 (Best: 17.600 @epoch 47)
Forward: 2.09s

Saving...
Total: 5.49s

[Epoch 61]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.6988]	37.1+0.9s
[3200/15906]	[L1: 16.6949]	36.6+0.1s
[4800/15906]	[L1: 16.8906]	37.1+0.1s
[6400/15906]	[L1: 16.8911]	37.3+0.1s
[8000/15906]	[L1: 16.9074]	36.3+0.1s
[9600/15906]	[L1: 16.9044]	37.0+0.1s
[11200/15906]	[L1: 16.9525]	37.2+0.1s
[12800/15906]	[L1: 16.9336]	36.9+0.1s
[14400/15906]	[L1: 16.9150]	37.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.430 (Best: 17.600 @epoch 47)
Forward: 1.90s

Saving...
Total: 6.34s

[Epoch 62]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.7110]	37.2+0.8s
[3200/15906]	[L1: 16.9923]	37.2+0.1s
[4800/15906]	[L1: 16.8410]	36.2+0.1s
[6400/15906]	[L1: 16.8472]	36.8+0.1s
[8000/15906]	[L1: 16.8474]	36.9+0.1s
[9600/15906]	[L1: 16.9147]	37.1+0.1s
[11200/15906]	[L1: 16.9352]	36.7+0.1s
[12800/15906]	[L1: 16.8977]	36.3+0.1s
[14400/15906]	[L1: 16.9242]	36.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.901 (Best: 17.600 @epoch 47)
Forward: 2.07s

Saving...
Total: 6.46s

[Epoch 63]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.8531]	37.4+1.0s
[3200/15906]	[L1: 16.6677]	36.7+0.1s
[4800/15906]	[L1: 16.5635]	36.9+0.1s
[6400/15906]	[L1: 16.5592]	36.7+0.1s
[8000/15906]	[L1: 16.5355]	37.5+0.1s
[9600/15906]	[L1: 16.5948]	36.6+0.1s
[11200/15906]	[L1: 16.6799]	36.9+0.1s
[12800/15906]	[L1: 16.7220]	36.4+0.1s
[14400/15906]	[L1: 16.7643]	36.7+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.614 (Best: 17.614 @epoch 63)
Forward: 2.12s

Saving...
Total: 6.62s

[Epoch 64]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.7704]	36.7+1.0s
[3200/15906]	[L1: 17.0263]	36.7+0.1s
[4800/15906]	[L1: 17.0073]	36.3+0.1s
[6400/15906]	[L1: 17.0783]	36.6+0.1s
[8000/15906]	[L1: 16.9515]	36.5+0.1s
[9600/15906]	[L1: 16.9508]	36.8+0.1s
[11200/15906]	[L1: 16.9116]	36.4+0.1s
[12800/15906]	[L1: 16.8606]	36.8+0.1s
[14400/15906]	[L1: 16.8598]	36.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.311 (Best: 17.614 @epoch 63)
Forward: 1.77s

Saving...
Total: 5.15s

[Epoch 65]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.8767]	37.2+1.0s
[3200/15906]	[L1: 16.9226]	36.7+0.1s
[4800/15906]	[L1: 16.7447]	37.2+0.1s
[6400/15906]	[L1: 16.7056]	36.7+0.1s
[8000/15906]	[L1: 16.6930]	37.0+0.1s
[9600/15906]	[L1: 16.6770]	36.5+0.1s
[11200/15906]	[L1: 16.6011]	36.8+0.1s
[12800/15906]	[L1: 16.6364]	37.2+0.1s
[14400/15906]	[L1: 16.6359]	37.4+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.530 (Best: 17.614 @epoch 63)
Forward: 1.98s

Saving...
Total: 6.36s

[Epoch 66]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.5863]	37.0+1.1s
[3200/15906]	[L1: 16.7174]	36.9+0.1s
[4800/15906]	[L1: 16.6972]	37.1+0.1s
[6400/15906]	[L1: 16.6535]	37.6+0.1s
[8000/15906]	[L1: 16.6524]	36.5+0.1s
[9600/15906]	[L1: 16.6544]	36.6+0.1s
[11200/15906]	[L1: 16.6862]	36.4+0.1s
[12800/15906]	[L1: 16.7189]	36.8+0.1s
[14400/15906]	[L1: 16.7166]	36.7+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.352 (Best: 17.614 @epoch 63)
Forward: 2.27s

Saving...
Total: 5.70s

[Epoch 67]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.6295]	37.3+1.1s
[3200/15906]	[L1: 16.8857]	37.2+0.1s
[4800/15906]	[L1: 16.8890]	36.7+0.1s
[6400/15906]	[L1: 16.7998]	36.4+0.1s
[8000/15906]	[L1: 16.6600]	37.1+0.1s
[9600/15906]	[L1: 16.5537]	37.2+0.1s
[11200/15906]	[L1: 16.5724]	37.2+0.1s
[12800/15906]	[L1: 16.5783]	36.8+0.1s
[14400/15906]	[L1: 16.5735]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.796 (Best: 17.796 @epoch 67)
Forward: 2.11s

Saving...
Total: 5.58s

[Epoch 68]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.9885]	37.3+0.9s
[3200/15906]	[L1: 16.8030]	37.1+0.1s
[4800/15906]	[L1: 16.7884]	37.0+0.1s
[6400/15906]	[L1: 16.6860]	36.7+0.1s
[8000/15906]	[L1: 16.7219]	36.3+0.1s
[9600/15906]	[L1: 16.7388]	36.7+0.1s
[11200/15906]	[L1: 16.7964]	36.1+0.1s
[12800/15906]	[L1: 16.7375]	36.8+0.1s
[14400/15906]	[L1: 16.7083]	36.5+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.765 (Best: 17.796 @epoch 67)
Forward: 2.09s

Saving...
Total: 5.51s

[Epoch 69]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.8495]	36.8+1.0s
[3200/15906]	[L1: 16.4513]	36.9+0.1s
[4800/15906]	[L1: 16.4084]	36.5+0.1s
[6400/15906]	[L1: 16.4798]	36.2+0.1s
[8000/15906]	[L1: 16.4243]	37.0+0.1s
[9600/15906]	[L1: 16.3950]	37.0+0.1s
[11200/15906]	[L1: 16.4748]	36.9+0.1s
[12800/15906]	[L1: 16.4979]	37.8+0.1s
[14400/15906]	[L1: 16.5389]	36.5+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.579 (Best: 17.796 @epoch 67)
Forward: 2.21s

Saving...
Total: 6.59s

[Epoch 70]	Learning rate: 5.00e-5
[1600/15906]	[L1: 17.0167]	36.4+1.0s
[3200/15906]	[L1: 16.8737]	37.1+0.1s
[4800/15906]	[L1: 16.6054]	36.3+0.1s
[6400/15906]	[L1: 16.5540]	36.4+0.1s
[8000/15906]	[L1: 16.5576]	36.9+0.1s
[9600/15906]	[L1: 16.5427]	36.6+0.1s
[11200/15906]	[L1: 16.5831]	36.8+0.1s
[12800/15906]	[L1: 16.5751]	36.7+0.1s
[14400/15906]	[L1: 16.5700]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.630 (Best: 17.796 @epoch 67)
Forward: 1.91s

Saving...
Total: 6.29s

[Epoch 71]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.5806]	37.2+1.0s
[3200/15906]	[L1: 16.5026]	36.7+0.1s
[4800/15906]	[L1: 16.4595]	37.4+0.1s
[6400/15906]	[L1: 16.4899]	37.5+0.1s
[8000/15906]	[L1: 16.5840]	37.2+0.1s
[9600/15906]	[L1: 16.5745]	37.0+0.1s
[11200/15906]	[L1: 16.6181]	36.7+0.1s
[12800/15906]	[L1: 16.5305]	36.3+0.1s
[14400/15906]	[L1: 16.5583]	36.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.364 (Best: 17.796 @epoch 67)
Forward: 2.17s

Saving...
Total: 5.61s

[Epoch 72]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.5059]	36.9+1.0s
[3200/15906]	[L1: 16.4749]	36.7+0.1s
[4800/15906]	[L1: 16.3969]	36.3+0.1s
[6400/15906]	[L1: 16.3512]	37.0+0.1s
[8000/15906]	[L1: 16.3289]	36.8+0.1s
[9600/15906]	[L1: 16.3605]	36.9+0.1s
[11200/15906]	[L1: 16.4048]	37.3+0.1s
[12800/15906]	[L1: 16.4043]	37.2+0.1s
[14400/15906]	[L1: 16.3753]	37.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.542 (Best: 17.796 @epoch 67)
Forward: 1.89s

Saving...
Total: 6.27s

[Epoch 73]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.7252]	36.8+1.0s
[3200/15906]	[L1: 16.7038]	36.2+0.1s
[4800/15906]	[L1: 16.6316]	36.2+0.1s
[6400/15906]	[L1: 16.5645]	37.3+0.1s
[8000/15906]	[L1: 16.5220]	36.9+0.1s
[9600/15906]	[L1: 16.4570]	36.7+0.1s
[11200/15906]	[L1: 16.4703]	37.0+0.1s
[12800/15906]	[L1: 16.3908]	36.9+0.1s
[14400/15906]	[L1: 16.4242]	36.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.363 (Best: 17.796 @epoch 67)
Forward: 2.09s

Saving...
Total: 5.47s

[Epoch 74]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.3046]	36.6+1.1s
[3200/15906]	[L1: 16.3642]	36.6+0.1s
[4800/15906]	[L1: 16.4623]	36.7+0.1s
[6400/15906]	[L1: 16.6907]	37.0+0.1s
[8000/15906]	[L1: 16.6301]	36.9+0.1s
[9600/15906]	[L1: 16.5482]	37.0+0.1s
[11200/15906]	[L1: 16.4872]	36.2+0.1s
[12800/15906]	[L1: 16.5479]	37.3+0.1s
[14400/15906]	[L1: 16.5568]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.315 (Best: 17.796 @epoch 67)
Forward: 1.97s

Saving...
Total: 5.44s

[Epoch 75]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.3638]	37.6+0.7s
[3200/15906]	[L1: 16.6038]	36.4+0.1s
[4800/15906]	[L1: 16.6079]	37.2+0.1s
[6400/15906]	[L1: 16.5525]	36.2+0.1s
[8000/15906]	[L1: 16.5515]	36.8+0.1s
[9600/15906]	[L1: 16.4696]	36.7+0.1s
[11200/15906]	[L1: 16.3934]	37.2+0.1s
[12800/15906]	[L1: 16.3513]	37.0+0.1s
[14400/15906]	[L1: 16.4326]	36.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.130 (Best: 17.796 @epoch 67)
Forward: 2.23s

Saving...
Total: 6.64s

[Epoch 76]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.4102]	37.0+0.9s
[3200/15906]	[L1: 16.3634]	37.0+0.1s
[4800/15906]	[L1: 16.4410]	37.2+0.1s
[6400/15906]	[L1: 16.3987]	36.7+0.1s
[8000/15906]	[L1: 16.3233]	36.9+0.1s
[9600/15906]	[L1: 16.3113]	37.0+0.1s
[11200/15906]	[L1: 16.2947]	37.5+0.1s
[12800/15906]	[L1: 16.3119]	37.1+0.1s
[14400/15906]	[L1: 16.3265]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.148 (Best: 17.796 @epoch 67)
Forward: 1.69s

Saving...
Total: 5.14s

[Epoch 77]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.7321]	36.6+1.0s
[3200/15906]	[L1: 16.5392]	36.6+0.1s
[4800/15906]	[L1: 16.5331]	38.0+0.1s
[6400/15906]	[L1: 16.5052]	37.1+0.1s
[8000/15906]	[L1: 16.5685]	36.9+0.1s
[9600/15906]	[L1: 16.5976]	36.6+0.1s
[11200/15906]	[L1: 16.5810]	36.6+0.2s
[12800/15906]	[L1: 16.5016]	36.5+0.1s
[14400/15906]	[L1: 16.5036]	37.5+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.308 (Best: 17.796 @epoch 67)
Forward: 2.01s

Saving...
Total: 5.44s

[Epoch 78]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.9631]	37.6+0.8s
[3200/15906]	[L1: 16.8547]	37.1+0.1s
[4800/15906]	[L1: 16.6828]	36.9+0.1s
[6400/15906]	[L1: 16.4246]	36.8+0.1s
[8000/15906]	[L1: 16.5090]	36.3+0.1s
[9600/15906]	[L1: 16.4315]	36.9+0.1s
[11200/15906]	[L1: 16.3549]	37.0+0.1s
[12800/15906]	[L1: 16.3792]	37.3+0.1s
[14400/15906]	[L1: 16.3930]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.510 (Best: 17.796 @epoch 67)
Forward: 2.03s

Saving...
Total: 5.41s

[Epoch 79]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.1941]	36.9+0.9s
[3200/15906]	[L1: 16.2163]	37.3+0.1s
[4800/15906]	[L1: 16.1844]	36.8+0.1s
[6400/15906]	[L1: 16.1728]	37.6+0.1s
[8000/15906]	[L1: 16.1904]	37.1+0.1s
[9600/15906]	[L1: 16.2362]	36.2+0.1s
[11200/15906]	[L1: 16.2623]	37.2+0.1s
[12800/15906]	[L1: 16.2775]	37.4+0.1s
[14400/15906]	[L1: 16.3090]	36.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.526 (Best: 17.796 @epoch 67)
Forward: 2.04s

Saving...
Total: 5.47s

[Epoch 80]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.8535]	37.4+1.1s
[3200/15906]	[L1: 16.6875]	36.7+0.1s
[4800/15906]	[L1: 16.6051]	36.7+0.1s
[6400/15906]	[L1: 16.6004]	36.8+0.1s
[8000/15906]	[L1: 16.4077]	36.8+0.1s
[9600/15906]	[L1: 16.3869]	37.1+0.1s
[11200/15906]	[L1: 16.2657]	36.7+0.1s
[12800/15906]	[L1: 16.2082]	37.0+0.1s
[14400/15906]	[L1: 16.1792]	36.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.352 (Best: 17.796 @epoch 67)
Forward: 2.06s

Saving...
Total: 6.46s

[Epoch 81]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.3587]	37.2+1.0s
[3200/15906]	[L1: 16.2875]	36.9+0.1s
[4800/15906]	[L1: 16.3228]	36.6+0.1s
[6400/15906]	[L1: 16.2607]	36.8+0.1s
[8000/15906]	[L1: 16.3684]	37.3+0.1s
[9600/15906]	[L1: 16.3135]	36.4+0.1s
[11200/15906]	[L1: 16.2425]	37.2+0.1s
[12800/15906]	[L1: 16.2004]	37.0+0.2s
[14400/15906]	[L1: 16.2105]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.471 (Best: 17.796 @epoch 67)
Forward: 2.13s

Saving...
Total: 5.57s

[Epoch 82]	Learning rate: 5.00e-5
[1600/15906]	[L1: 15.9272]	36.9+1.0s
[3200/15906]	[L1: 15.9287]	36.7+0.2s
[4800/15906]	[L1: 16.0379]	36.3+0.1s
[6400/15906]	[L1: 16.2054]	36.6+0.1s
[8000/15906]	[L1: 16.2204]	36.7+0.1s
[9600/15906]	[L1: 16.2522]	37.0+0.1s
[11200/15906]	[L1: 16.2037]	36.7+0.2s
[12800/15906]	[L1: 16.2000]	37.1+0.1s
[14400/15906]	[L1: 16.1873]	36.3+0.2s

Evaluation:
[SRRAW x8]	PSNR: 17.298 (Best: 17.796 @epoch 67)
Forward: 2.01s

Saving...
Total: 5.45s

[Epoch 83]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.2839]	38.0+1.0s
[3200/15906]	[L1: 16.1787]	37.1+0.1s
[4800/15906]	[L1: 16.2687]	37.2+0.1s
[6400/15906]	[L1: 16.2158]	36.6+0.1s
[8000/15906]	[L1: 16.1305]	37.2+0.1s
[9600/15906]	[L1: 16.1630]	36.2+0.1s
[11200/15906]	[L1: 16.2727]	36.8+0.1s
[12800/15906]	[L1: 16.3103]	37.3+0.1s
[14400/15906]	[L1: 16.2782]	36.5+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.557 (Best: 17.796 @epoch 67)
Forward: 2.11s

Saving...
Total: 6.51s

[Epoch 84]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.0924]	36.8+1.0s
[3200/15906]	[L1: 16.2350]	37.2+0.1s
[4800/15906]	[L1: 16.3218]	36.9+0.1s
[6400/15906]	[L1: 16.2615]	36.7+0.1s
[8000/15906]	[L1: 16.2569]	36.9+0.1s
[9600/15906]	[L1: 16.2898]	38.7+0.1s
[11200/15906]	[L1: 16.3088]	36.2+0.1s
[12800/15906]	[L1: 16.2372]	37.2+0.1s
[14400/15906]	[L1: 16.2414]	36.4+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.532 (Best: 17.796 @epoch 67)
Forward: 1.97s

Saving...
Total: 6.39s

[Epoch 85]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.4745]	36.7+0.9s
[3200/15906]	[L1: 16.2733]	36.5+0.1s
[4800/15906]	[L1: 16.2579]	36.6+0.1s
[6400/15906]	[L1: 16.3579]	36.8+0.1s
[8000/15906]	[L1: 16.2197]	37.0+0.1s
[9600/15906]	[L1: 16.1413]	36.2+0.1s
[11200/15906]	[L1: 16.1589]	36.5+0.1s
[12800/15906]	[L1: 16.1409]	36.6+0.1s
[14400/15906]	[L1: 16.1411]	36.4+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.231 (Best: 17.796 @epoch 67)
Forward: 2.08s

Saving...
Total: 6.44s

[Epoch 86]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.9547]	37.2+0.9s
[3200/15906]	[L1: 16.7571]	37.2+0.1s
[4800/15906]	[L1: 16.6214]	36.4+0.1s
[6400/15906]	[L1: 16.4713]	36.9+0.1s
[8000/15906]	[L1: 16.4559]	37.2+0.1s
[9600/15906]	[L1: 16.4494]	37.3+0.1s
[11200/15906]	[L1: 16.4690]	36.4+0.1s
[12800/15906]	[L1: 16.4158]	36.4+0.1s
[14400/15906]	[L1: 16.4229]	37.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.179 (Best: 17.796 @epoch 67)
Forward: 1.99s

Saving...
Total: 6.42s

[Epoch 87]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.1134]	37.5+0.9s
[3200/15906]	[L1: 15.8920]	36.7+0.2s
[4800/15906]	[L1: 16.0120]	36.7+0.1s
[6400/15906]	[L1: 15.9375]	36.5+0.1s
[8000/15906]	[L1: 15.9224]	36.3+0.1s
[9600/15906]	[L1: 15.9851]	36.7+0.1s
[11200/15906]	[L1: 15.9674]	36.5+0.1s
[12800/15906]	[L1: 16.0607]	36.8+0.1s
[14400/15906]	[L1: 16.0630]	36.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.013 (Best: 17.796 @epoch 67)
Forward: 1.99s

Saving...
Total: 5.42s

[Epoch 88]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.6600]	37.3+1.0s
[3200/15906]	[L1: 16.3601]	37.2+0.1s
[4800/15906]	[L1: 16.4850]	36.4+0.1s
[6400/15906]	[L1: 16.3334]	36.7+0.1s
[8000/15906]	[L1: 16.3436]	36.9+0.1s
[9600/15906]	[L1: 16.4041]	36.5+0.1s
[11200/15906]	[L1: 16.4423]	37.2+0.1s
[12800/15906]	[L1: 16.4385]	36.3+0.1s
[14400/15906]	[L1: 16.4576]	37.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.100 (Best: 17.796 @epoch 67)
Forward: 2.19s

Saving...
Total: 5.58s

[Epoch 89]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.3330]	37.3+0.9s
[3200/15906]	[L1: 16.4210]	36.8+0.1s
[4800/15906]	[L1: 16.2757]	37.6+0.1s
[6400/15906]	[L1: 16.1694]	36.9+0.1s
[8000/15906]	[L1: 16.3158]	36.7+0.1s
[9600/15906]	[L1: 16.2010]	36.6+0.1s
[11200/15906]	[L1: 16.1101]	36.7+0.1s
[12800/15906]	[L1: 16.1033]	36.5+0.1s
[14400/15906]	[L1: 16.1418]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.218 (Best: 17.796 @epoch 67)
Forward: 2.31s

Saving...
Total: 6.72s

[Epoch 90]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.3011]	36.9+0.9s
[3200/15906]	[L1: 16.2557]	36.3+0.1s
[4800/15906]	[L1: 16.1851]	36.8+0.1s
[6400/15906]	[L1: 16.2016]	36.5+0.1s
[8000/15906]	[L1: 16.1202]	36.9+0.1s
[9600/15906]	[L1: 16.0304]	36.5+0.1s
[11200/15906]	[L1: 16.0769]	36.6+0.1s
[12800/15906]	[L1: 16.1010]	36.8+0.1s
[14400/15906]	[L1: 16.1036]	37.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.470 (Best: 17.796 @epoch 67)
Forward: 2.06s

Saving...
Total: 5.43s

[Epoch 91]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.4693]	36.9+1.1s
[3200/15906]	[L1: 16.4856]	37.2+0.1s
[4800/15906]	[L1: 16.3970]	36.9+0.1s
[6400/15906]	[L1: 16.3008]	36.7+0.1s
[8000/15906]	[L1: 16.3045]	36.8+0.1s
[9600/15906]	[L1: 16.3501]	36.8+0.1s
[11200/15906]	[L1: 16.2924]	36.4+0.1s
[12800/15906]	[L1: 16.2902]	37.1+0.1s
[14400/15906]	[L1: 16.2971]	36.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.511 (Best: 17.796 @epoch 67)
Forward: 2.08s

Saving...
Total: 5.46s

[Epoch 92]	Learning rate: 5.00e-5
[1600/15906]	[L1: 15.5253]	37.4+0.9s
[3200/15906]	[L1: 15.8604]	36.7+0.1s
[4800/15906]	[L1: 15.9177]	36.5+0.1s
[6400/15906]	[L1: 15.9224]	37.5+0.1s
[8000/15906]	[L1: 15.8765]	37.0+0.1s
[9600/15906]	[L1: 15.9507]	37.2+0.1s
[11200/15906]	[L1: 16.0054]	37.1+0.1s
[12800/15906]	[L1: 16.0916]	37.0+0.1s
[14400/15906]	[L1: 16.0724]	36.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.266 (Best: 17.796 @epoch 67)
Forward: 1.75s

Saving...
Total: 6.17s

[Epoch 93]	Learning rate: 5.00e-5
[1600/15906]	[L1: 17.2548]	37.4+0.9s
[3200/15906]	[L1: 16.9215]	36.9+0.1s
[4800/15906]	[L1: 16.8436]	37.4+0.1s
[6400/15906]	[L1: 16.6396]	37.3+0.1s
[8000/15906]	[L1: 16.4415]	36.9+0.1s
[9600/15906]	[L1: 16.4160]	37.1+0.1s
[11200/15906]	[L1: 16.4176]	37.0+0.1s
[12800/15906]	[L1: 16.3605]	36.7+0.1s
[14400/15906]	[L1: 16.2771]	36.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.997 (Best: 17.796 @epoch 67)
Forward: 2.29s

Saving...
Total: 5.69s

[Epoch 94]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.6436]	37.7+0.9s
[3200/15906]	[L1: 16.7081]	36.7+0.1s
[4800/15906]	[L1: 16.4131]	36.9+0.1s
[6400/15906]	[L1: 16.1914]	36.6+0.1s
[8000/15906]	[L1: 16.2186]	37.1+0.1s
[9600/15906]	[L1: 16.1734]	36.4+0.1s
[11200/15906]	[L1: 16.1880]	36.5+0.1s
[12800/15906]	[L1: 16.1295]	36.8+0.1s
[14400/15906]	[L1: 16.1303]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.189 (Best: 17.796 @epoch 67)
Forward: 2.09s

Saving...
Total: 5.51s

[Epoch 95]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.3903]	36.6+1.1s
[3200/15906]	[L1: 16.1937]	37.1+0.1s
[4800/15906]	[L1: 16.1771]	36.5+0.1s
[6400/15906]	[L1: 16.1253]	36.6+0.1s
[8000/15906]	[L1: 16.0313]	36.4+0.1s
[9600/15906]	[L1: 16.0688]	37.3+0.1s
[11200/15906]	[L1: 16.0844]	37.3+0.1s
[12800/15906]	[L1: 16.0943]	36.4+0.1s
[14400/15906]	[L1: 16.0939]	37.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.849 (Best: 17.796 @epoch 67)
Forward: 2.05s

Saving...
Total: 5.43s

[Epoch 96]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.3610]	37.0+0.9s
[3200/15906]	[L1: 16.4356]	36.5+0.1s
[4800/15906]	[L1: 16.4381]	36.8+0.1s
[6400/15906]	[L1: 16.2632]	37.1+0.1s
[8000/15906]	[L1: 16.1960]	36.8+0.1s
[9600/15906]	[L1: 16.1540]	36.8+0.1s
[11200/15906]	[L1: 16.1446]	36.6+0.1s
[12800/15906]	[L1: 16.0896]	36.0+0.1s
[14400/15906]	[L1: 16.0893]	36.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.543 (Best: 17.796 @epoch 67)
Forward: 1.79s

Saving...
Total: 5.16s

[Epoch 97]	Learning rate: 5.00e-5
[1600/15906]	[L1: 15.9196]	36.8+1.1s
[3200/15906]	[L1: 15.6864]	36.6+0.1s
[4800/15906]	[L1: 15.9070]	36.8+0.1s
[6400/15906]	[L1: 15.9841]	37.4+0.1s
[8000/15906]	[L1: 16.0727]	37.2+0.1s
[9600/15906]	[L1: 15.9874]	36.8+0.1s
[11200/15906]	[L1: 16.0013]	37.0+0.1s
[12800/15906]	[L1: 15.9791]	36.6+0.1s
[14400/15906]	[L1: 15.9584]	36.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.291 (Best: 17.796 @epoch 67)
Forward: 2.07s

Saving...
Total: 5.48s

[Epoch 98]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.2440]	37.0+1.0s
[3200/15906]	[L1: 16.1011]	36.3+0.1s
[4800/15906]	[L1: 16.1067]	36.5+0.1s
[6400/15906]	[L1: 16.1725]	36.9+0.1s
[8000/15906]	[L1: 16.1075]	36.5+0.1s
[9600/15906]	[L1: 15.9905]	36.3+0.1s
[11200/15906]	[L1: 15.9705]	37.1+0.1s
[12800/15906]	[L1: 16.0038]	37.0+0.1s
[14400/15906]	[L1: 16.0538]	36.7+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.412 (Best: 17.796 @epoch 67)
Forward: 2.13s

Saving...
Total: 5.49s

[Epoch 99]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.1059]	36.9+0.9s
[3200/15906]	[L1: 15.9423]	36.4+0.1s
[4800/15906]	[L1: 15.9039]	36.9+0.1s
[6400/15906]	[L1: 15.9292]	36.7+0.1s
[8000/15906]	[L1: 16.0617]	37.2+0.1s
[9600/15906]	[L1: 16.1189]	36.5+0.1s
[11200/15906]	[L1: 16.1033]	36.7+0.1s
[12800/15906]	[L1: 16.1104]	36.4+0.1s
[14400/15906]	[L1: 16.0885]	36.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.469 (Best: 17.796 @epoch 67)
Forward: 2.07s

Saving...
Total: 5.44s

[Epoch 100]	Learning rate: 5.00e-5
[1600/15906]	[L1: 16.1252]	37.4+0.9s
[3200/15906]	[L1: 15.7606]	37.2+0.1s
[4800/15906]	[L1: 15.6336]	36.2+0.1s
[6400/15906]	[L1: 15.6645]	36.7+0.1s
[8000/15906]	[L1: 15.7281]	36.5+0.1s
[9600/15906]	[L1: 15.7270]	36.8+0.1s
[11200/15906]	[L1: 15.7529]	36.6+0.1s
[12800/15906]	[L1: 15.6958]	37.2+0.1s
[14400/15906]	[L1: 15.7754]	36.4+0.2s

Evaluation:
[SRRAW x8]	PSNR: 17.719 (Best: 17.796 @epoch 67)
Forward: 1.93s

Saving...
Total: 5.34s

[Epoch 101]	Learning rate: 1.25e-5
[1600/15906]	[L1: 16.1622]	36.5+1.1s
[3200/15906]	[L1: 15.9662]	36.2+0.1s
[4800/15906]	[L1: 15.9041]	37.2+0.1s
[6400/15906]	[L1: 15.8056]	37.1+0.1s
[8000/15906]	[L1: 15.6882]	36.7+0.1s
[9600/15906]	[L1: 15.5956]	36.3+0.1s
[11200/15906]	[L1: 15.5359]	36.7+0.1s
[12800/15906]	[L1: 15.4929]	37.2+0.1s
[14400/15906]	[L1: 15.4922]	36.4+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.642 (Best: 17.796 @epoch 67)
Forward: 1.97s

Saving...
Total: 5.35s

[Epoch 102]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.7974]	37.5+1.1s
[3200/15906]	[L1: 14.9849]	36.0+0.1s
[4800/15906]	[L1: 14.9472]	37.3+0.1s
[6400/15906]	[L1: 15.0686]	36.6+0.1s
[8000/15906]	[L1: 15.1334]	36.8+0.1s
[9600/15906]	[L1: 15.0898]	36.5+0.1s
[11200/15906]	[L1: 15.1921]	36.6+0.1s
[12800/15906]	[L1: 15.2412]	36.7+0.1s
[14400/15906]	[L1: 15.1865]	36.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.203 (Best: 17.796 @epoch 67)
Forward: 1.84s

Saving...
Total: 6.26s

[Epoch 103]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.8178]	37.4+1.1s
[3200/15906]	[L1: 14.9755]	36.9+0.1s
[4800/15906]	[L1: 15.0626]	36.9+0.1s
[6400/15906]	[L1: 15.2099]	36.5+0.1s
[8000/15906]	[L1: 15.1900]	37.0+0.1s
[9600/15906]	[L1: 15.1695]	36.6+0.1s
[11200/15906]	[L1: 15.0938]	36.9+0.1s
[12800/15906]	[L1: 15.0549]	36.6+0.1s
[14400/15906]	[L1: 15.0258]	36.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.514 (Best: 17.796 @epoch 67)
Forward: 2.37s

Saving...
Total: 5.77s

[Epoch 104]	Learning rate: 2.50e-5
[1600/15906]	[L1: 15.6423]	37.7+1.1s
[3200/15906]	[L1: 15.4845]	36.3+0.1s
[4800/15906]	[L1: 15.5079]	37.0+0.1s
[6400/15906]	[L1: 15.2068]	37.1+0.1s
[8000/15906]	[L1: 15.1265]	36.8+0.1s
[9600/15906]	[L1: 15.0819]	36.9+0.1s
[11200/15906]	[L1: 15.0699]	37.1+0.1s
[12800/15906]	[L1: 15.0804]	36.8+0.1s
[14400/15906]	[L1: 15.0505]	36.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.510 (Best: 17.796 @epoch 67)
Forward: 1.94s

Saving...
Total: 5.34s

[Epoch 105]	Learning rate: 2.50e-5
[1600/15906]	[L1: 15.1381]	37.1+1.0s
[3200/15906]	[L1: 15.0522]	36.4+0.1s
[4800/15906]	[L1: 15.0879]	37.2+0.1s
[6400/15906]	[L1: 15.0273]	36.8+0.1s
[8000/15906]	[L1: 15.0976]	36.7+0.1s
[9600/15906]	[L1: 15.1027]	36.6+0.1s
[11200/15906]	[L1: 15.0917]	36.9+0.1s
[12800/15906]	[L1: 15.0651]	36.9+0.1s
[14400/15906]	[L1: 15.0597]	38.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.698 (Best: 17.796 @epoch 67)
Forward: 2.10s

Saving...
Total: 5.52s

[Epoch 106]	Learning rate: 2.50e-5
[1600/15906]	[L1: 15.1708]	37.1+1.1s
[3200/15906]	[L1: 15.1316]	36.6+0.1s
[4800/15906]	[L1: 15.1273]	37.0+0.1s
[6400/15906]	[L1: 15.1774]	36.0+0.1s
[8000/15906]	[L1: 15.1987]	37.0+0.1s
[9600/15906]	[L1: 15.1129]	36.4+0.1s
[11200/15906]	[L1: 15.1353]	36.7+0.1s
[12800/15906]	[L1: 15.0905]	36.6+0.1s
[14400/15906]	[L1: 15.1227]	36.7+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.486 (Best: 17.796 @epoch 67)
Forward: 2.21s

Saving...
Total: 5.60s

[Epoch 107]	Learning rate: 2.50e-5
[1600/15906]	[L1: 15.2886]	37.6+1.0s
[3200/15906]	[L1: 15.0691]	36.5+0.1s
[4800/15906]	[L1: 15.1190]	37.2+0.1s
[6400/15906]	[L1: 14.9461]	36.9+0.1s
[8000/15906]	[L1: 15.0209]	37.3+0.1s
[9600/15906]	[L1: 14.9587]	37.3+0.1s
[11200/15906]	[L1: 14.9394]	36.7+0.1s
[12800/15906]	[L1: 14.9351]	37.2+0.1s
[14400/15906]	[L1: 14.9270]	36.4+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.337 (Best: 17.796 @epoch 67)
Forward: 2.11s

Saving...
Total: 5.46s

[Epoch 108]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.5372]	37.0+1.0s
[3200/15906]	[L1: 14.7340]	37.0+0.1s
[4800/15906]	[L1: 14.8655]	36.6+0.1s
[6400/15906]	[L1: 14.8788]	36.8+0.1s
[8000/15906]	[L1: 14.9123]	36.7+0.1s
[9600/15906]	[L1: 14.9344]	36.5+0.2s
[11200/15906]	[L1: 14.8778]	36.8+0.1s
[12800/15906]	[L1: 14.8465]	36.3+0.1s
[14400/15906]	[L1: 14.7856]	36.4+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.466 (Best: 17.796 @epoch 67)
Forward: 2.03s

Saving...
Total: 5.44s

[Epoch 109]	Learning rate: 2.50e-5
[1600/15906]	[L1: 15.0962]	37.2+0.9s
[3200/15906]	[L1: 15.0570]	36.5+0.1s
[4800/15906]	[L1: 15.0939]	36.9+0.1s
[6400/15906]	[L1: 15.1415]	36.6+0.1s
[8000/15906]	[L1: 15.0742]	36.9+0.1s
[9600/15906]	[L1: 15.0034]	37.2+0.1s
[11200/15906]	[L1: 14.9983]	36.8+0.1s
[12800/15906]	[L1: 15.0009]	37.3+0.1s
[14400/15906]	[L1: 14.9826]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.666 (Best: 17.796 @epoch 67)
Forward: 2.07s

Saving...
Total: 5.45s

[Epoch 110]	Learning rate: 2.50e-5
[1600/15906]	[L1: 15.3029]	37.1+0.8s
[3200/15906]	[L1: 15.2780]	37.1+0.1s
[4800/15906]	[L1: 15.0837]	36.7+0.1s
[6400/15906]	[L1: 14.9491]	36.6+0.1s
[8000/15906]	[L1: 14.9298]	37.0+0.1s
[9600/15906]	[L1: 14.9148]	36.9+0.1s
[11200/15906]	[L1: 14.9277]	37.6+0.1s
[12800/15906]	[L1: 14.8877]	36.5+0.1s
[14400/15906]	[L1: 14.8825]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.178 (Best: 17.796 @epoch 67)
Forward: 2.04s

Saving...
Total: 5.46s

[Epoch 111]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.6538]	37.1+1.1s
[3200/15906]	[L1: 14.8083]	36.7+0.1s
[4800/15906]	[L1: 14.9070]	36.4+0.1s
[6400/15906]	[L1: 14.8157]	36.6+0.1s
[8000/15906]	[L1: 14.8661]	37.1+0.1s
[9600/15906]	[L1: 14.8729]	36.8+0.1s
[11200/15906]	[L1: 14.8529]	36.4+0.1s
[12800/15906]	[L1: 14.8970]	36.2+0.1s
[14400/15906]	[L1: 14.8212]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.521 (Best: 17.796 @epoch 67)
Forward: 1.94s

Saving...
Total: 5.33s

[Epoch 112]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.9576]	37.3+0.9s
[3200/15906]	[L1: 14.8075]	36.9+0.1s
[4800/15906]	[L1: 14.8658]	37.0+0.1s
[6400/15906]	[L1: 14.9793]	36.7+0.1s
[8000/15906]	[L1: 14.9181]	37.9+0.1s
[9600/15906]	[L1: 14.9561]	36.8+0.1s
[11200/15906]	[L1: 14.9187]	37.4+0.1s
[12800/15906]	[L1: 14.8211]	37.0+0.1s
[14400/15906]	[L1: 14.8134]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.663 (Best: 17.796 @epoch 67)
Forward: 1.93s

Saving...
Total: 5.32s

[Epoch 113]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.8509]	36.5+1.3s
[3200/15906]	[L1: 14.5833]	36.8+0.1s
[4800/15906]	[L1: 14.6064]	37.0+0.1s
[6400/15906]	[L1: 14.5834]	36.6+0.1s
[8000/15906]	[L1: 14.6844]	36.7+0.1s
[9600/15906]	[L1: 14.6813]	36.6+0.1s
[11200/15906]	[L1: 14.6611]	36.6+0.1s
[12800/15906]	[L1: 14.6324]	36.3+0.1s
[14400/15906]	[L1: 14.6571]	36.5+0.1s

Evaluation:
[SRRAW x8]	PSNR: 16.896 (Best: 17.796 @epoch 67)
Forward: 1.88s

Saving...
Total: 5.31s

[Epoch 114]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.8134]	36.8+0.9s
[3200/15906]	[L1: 15.0680]	36.6+0.1s
[4800/15906]	[L1: 14.8102]	37.1+0.1s
[6400/15906]	[L1: 14.7714]	37.6+0.1s
[8000/15906]	[L1: 14.6738]	36.6+0.1s
[9600/15906]	[L1: 14.7573]	36.8+0.1s
[11200/15906]	[L1: 14.7575]	37.3+0.1s
[12800/15906]	[L1: 14.7222]	36.9+0.1s
[14400/15906]	[L1: 14.7297]	36.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.483 (Best: 17.796 @epoch 67)
Forward: 1.97s

Saving...
Total: 5.33s

[Epoch 115]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.7074]	37.7+0.8s
[3200/15906]	[L1: 14.5685]	36.9+0.1s
[4800/15906]	[L1: 14.5432]	36.3+0.1s
[6400/15906]	[L1: 14.5967]	36.5+0.1s
[8000/15906]	[L1: 14.6657]	36.5+0.1s
[9600/15906]	[L1: 14.6015]	36.5+0.1s
[11200/15906]	[L1: 14.6239]	36.4+0.1s
[12800/15906]	[L1: 14.5956]	37.1+0.1s
[14400/15906]	[L1: 14.5976]	36.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.753 (Best: 17.796 @epoch 67)
Forward: 2.27s

Saving...
Total: 6.65s

[Epoch 116]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.4105]	37.3+1.0s
[3200/15906]	[L1: 14.4416]	36.5+0.1s
[4800/15906]	[L1: 14.4289]	36.6+0.1s
[6400/15906]	[L1: 14.4344]	36.5+0.1s
[8000/15906]	[L1: 14.5115]	36.5+0.1s
[9600/15906]	[L1: 14.5313]	37.4+0.1s
[11200/15906]	[L1: 14.5179]	36.5+0.1s
[12800/15906]	[L1: 14.5118]	37.0+0.1s
[14400/15906]	[L1: 14.5511]	36.4+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.435 (Best: 17.796 @epoch 67)
Forward: 2.06s

Saving...
Total: 6.47s

[Epoch 117]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.6178]	37.2+1.1s
[3200/15906]	[L1: 14.5331]	37.1+0.1s
[4800/15906]	[L1: 14.7347]	36.4+0.1s
[6400/15906]	[L1: 14.6443]	36.7+0.1s
[8000/15906]	[L1: 14.6517]	36.3+0.1s
[9600/15906]	[L1: 14.6153]	36.9+0.1s
[11200/15906]	[L1: 14.6084]	37.1+0.1s
[12800/15906]	[L1: 14.6193]	36.2+0.1s
[14400/15906]	[L1: 14.6041]	36.7+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.286 (Best: 17.796 @epoch 67)
Forward: 1.96s

Saving...
Total: 5.35s

[Epoch 118]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.5531]	37.5+0.9s
[3200/15906]	[L1: 14.3771]	36.9+0.1s
[4800/15906]	[L1: 14.5713]	37.1+0.1s
[6400/15906]	[L1: 14.5799]	36.6+0.1s
[8000/15906]	[L1: 14.5580]	36.9+0.1s
[9600/15906]	[L1: 14.6212]	36.5+0.1s
[11200/15906]	[L1: 14.5909]	36.4+0.1s
[12800/15906]	[L1: 14.5780]	36.7+0.1s
[14400/15906]	[L1: 14.5486]	36.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.987 (Best: 17.987 @epoch 118)
Forward: 2.18s

Saving...
Total: 5.65s

[Epoch 119]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.1200]	36.7+1.0s
[3200/15906]	[L1: 14.1153]	36.6+0.1s
[4800/15906]	[L1: 14.1318]	36.3+0.1s
[6400/15906]	[L1: 14.2439]	36.7+0.1s
[8000/15906]	[L1: 14.3452]	37.0+0.1s
[9600/15906]	[L1: 14.3873]	36.9+0.2s
[11200/15906]	[L1: 14.5092]	36.6+0.1s
[12800/15906]	[L1: 14.5035]	36.8+0.1s
[14400/15906]	[L1: 14.5397]	36.4+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.806 (Best: 17.987 @epoch 118)
Forward: 2.19s

Saving...
Total: 5.56s

[Epoch 120]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.4913]	36.9+0.8s
[3200/15906]	[L1: 14.4912]	36.5+0.1s
[4800/15906]	[L1: 14.5617]	36.4+0.1s
[6400/15906]	[L1: 14.6390]	36.1+0.1s
[8000/15906]	[L1: 14.6350]	37.4+0.1s
[9600/15906]	[L1: 14.6592]	36.8+0.1s
[11200/15906]	[L1: 14.5792]	36.4+0.1s
[12800/15906]	[L1: 14.5305]	36.6+0.1s
[14400/15906]	[L1: 14.5063]	36.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.354 (Best: 17.987 @epoch 118)
Forward: 1.86s

Saving...
Total: 5.24s

[Epoch 121]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.6710]	36.9+0.9s
[3200/15906]	[L1: 14.5573]	36.6+0.1s
[4800/15906]	[L1: 14.6557]	36.3+0.1s
[6400/15906]	[L1: 14.8249]	37.1+0.1s
[8000/15906]	[L1: 14.7646]	36.9+0.1s
[9600/15906]	[L1: 14.7774]	36.4+0.1s
[11200/15906]	[L1: 14.7523]	36.7+0.1s
[12800/15906]	[L1: 14.7406]	36.5+0.1s
[14400/15906]	[L1: 14.7543]	36.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.542 (Best: 17.987 @epoch 118)
Forward: 2.14s

Saving...
Total: 5.54s

[Epoch 122]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.8348]	37.7+0.9s
[3200/15906]	[L1: 14.7371]	36.8+0.1s
[4800/15906]	[L1: 14.7018]	37.2+0.1s
[6400/15906]	[L1: 14.7374]	36.6+0.1s
[8000/15906]	[L1: 14.6933]	37.0+0.1s
[9600/15906]	[L1: 14.6928]	36.6+0.1s
[11200/15906]	[L1: 14.6432]	35.9+0.1s
[12800/15906]	[L1: 14.6568]	36.8+0.1s
[14400/15906]	[L1: 14.6156]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.745 (Best: 17.987 @epoch 118)
Forward: 2.00s

Saving...
Total: 5.38s

[Epoch 123]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.7748]	36.7+1.0s
[3200/15906]	[L1: 14.8301]	37.5+0.1s
[4800/15906]	[L1: 14.8386]	37.0+0.1s
[6400/15906]	[L1: 14.6686]	36.7+0.1s
[8000/15906]	[L1: 14.6796]	36.5+0.1s
[9600/15906]	[L1: 14.7220]	36.6+0.1s
[11200/15906]	[L1: 14.7432]	37.2+0.1s
[12800/15906]	[L1: 14.7202]	37.2+0.1s
[14400/15906]	[L1: 14.7701]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.463 (Best: 17.987 @epoch 118)
Forward: 2.10s

Saving...
Total: 5.53s

[Epoch 124]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.3443]	37.3+0.9s
[3200/15906]	[L1: 14.5427]	36.6+0.1s
[4800/15906]	[L1: 14.4942]	36.7+0.2s
[6400/15906]	[L1: 14.5333]	36.6+0.1s
[8000/15906]	[L1: 14.5188]	36.4+0.1s
[9600/15906]	[L1: 14.5385]	36.6+0.1s
[11200/15906]	[L1: 14.5643]	37.1+0.1s
[12800/15906]	[L1: 14.5988]	36.2+0.1s
[14400/15906]	[L1: 14.6303]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.568 (Best: 17.987 @epoch 118)
Forward: 1.95s

Saving...
Total: 5.35s

[Epoch 125]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.9951]	37.3+1.0s
[3200/15906]	[L1: 14.8660]	36.9+0.1s
[4800/15906]	[L1: 14.7042]	36.6+0.1s
[6400/15906]	[L1: 14.7044]	36.7+0.1s
[8000/15906]	[L1: 14.6483]	36.8+0.1s
[9600/15906]	[L1: 14.6837]	37.5+0.1s
[11200/15906]	[L1: 14.6850]	36.5+0.1s
[12800/15906]	[L1: 14.6503]	36.6+0.1s
[14400/15906]	[L1: 14.6634]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.590 (Best: 17.987 @epoch 118)
Forward: 1.92s

Saving...
Total: 5.29s

[Epoch 126]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.7380]	37.7+1.1s
[3200/15906]	[L1: 14.7571]	37.4+0.1s
[4800/15906]	[L1: 14.7413]	36.4+0.1s
[6400/15906]	[L1: 14.6742]	36.6+0.1s
[8000/15906]	[L1: 14.6083]	36.8+0.1s
[9600/15906]	[L1: 14.6213]	36.6+0.1s
[11200/15906]	[L1: 14.5551]	37.2+0.1s
[12800/15906]	[L1: 14.4872]	37.1+0.1s
[14400/15906]	[L1: 14.5041]	36.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.553 (Best: 17.987 @epoch 118)
Forward: 2.29s

Saving...
Total: 6.71s

[Epoch 127]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.3031]	37.7+0.9s
[3200/15906]	[L1: 14.3692]	37.1+0.1s
[4800/15906]	[L1: 14.2483]	37.2+0.1s
[6400/15906]	[L1: 14.2401]	36.6+0.1s
[8000/15906]	[L1: 14.3491]	36.6+0.1s
[9600/15906]	[L1: 14.3532]	37.0+0.1s
[11200/15906]	[L1: 14.3556]	37.0+0.1s
[12800/15906]	[L1: 14.4298]	36.7+0.1s
[14400/15906]	[L1: 14.4630]	36.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.627 (Best: 17.987 @epoch 118)
Forward: 2.05s

Saving...
Total: 5.44s

[Epoch 128]	Learning rate: 2.50e-5
[1600/15906]	[L1: 15.3253]	37.3+1.0s
[3200/15906]	[L1: 15.0421]	36.6+0.1s
[4800/15906]	[L1: 14.9128]	36.6+0.1s
[6400/15906]	[L1: 14.8210]	36.8+0.1s
[8000/15906]	[L1: 14.7923]	36.4+0.1s
[9600/15906]	[L1: 14.7422]	36.8+0.1s
[11200/15906]	[L1: 14.6949]	36.7+0.1s
[12800/15906]	[L1: 14.6121]	36.9+0.1s
[14400/15906]	[L1: 14.5832]	36.7+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.074 (Best: 17.987 @epoch 118)
Forward: 1.72s

Saving...
Total: 5.11s

[Epoch 129]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.1145]	37.2+0.9s
[3200/15906]	[L1: 14.1111]	36.9+0.1s
[4800/15906]	[L1: 14.3148]	37.3+0.1s
[6400/15906]	[L1: 14.3353]	36.6+0.1s
[8000/15906]	[L1: 14.3521]	37.2+0.1s
[9600/15906]	[L1: 14.4047]	36.9+0.1s
[11200/15906]	[L1: 14.4728]	36.9+0.1s
[12800/15906]	[L1: 14.4890]	37.1+0.1s
[14400/15906]	[L1: 14.4906]	36.5+0.1s

Evaluation:
[SRRAW x8]	PSNR: 18.004 (Best: 18.004 @epoch 129)
Forward: 2.01s

Saving...
Total: 5.51s

[Epoch 130]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.5033]	38.5+0.9s
[3200/15906]	[L1: 14.4788]	36.9+0.1s
[4800/15906]	[L1: 14.6539]	37.2+0.1s
[6400/15906]	[L1: 14.5635]	36.9+0.1s
[8000/15906]	[L1: 14.5892]	37.2+0.1s
[9600/15906]	[L1: 14.5797]	36.7+0.1s
[11200/15906]	[L1: 14.5080]	37.0+0.1s
[12800/15906]	[L1: 14.4980]	36.9+0.1s
[14400/15906]	[L1: 14.4721]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.713 (Best: 18.004 @epoch 129)
Forward: 1.89s

Saving...
Total: 5.28s

[Epoch 131]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.5721]	37.1+0.8s
[3200/15906]	[L1: 14.5842]	37.3+0.1s
[4800/15906]	[L1: 14.6596]	37.2+0.1s
[6400/15906]	[L1: 14.5301]	36.1+0.1s
[8000/15906]	[L1: 14.4839]	37.1+0.1s
[9600/15906]	[L1: 14.4929]	36.8+0.1s
[11200/15906]	[L1: 14.5795]	37.0+0.1s
[12800/15906]	[L1: 14.5656]	36.5+0.1s
[14400/15906]	[L1: 14.5620]	37.7+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.641 (Best: 18.004 @epoch 129)
Forward: 2.13s

Saving...
Total: 5.57s

[Epoch 132]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.5357]	37.4+0.9s
[3200/15906]	[L1: 14.2963]	37.0+0.1s
[4800/15906]	[L1: 14.2506]	36.9+0.1s
[6400/15906]	[L1: 14.2545]	37.0+0.1s
[8000/15906]	[L1: 14.2632]	36.4+0.1s
[9600/15906]	[L1: 14.3037]	36.8+0.1s
[11200/15906]	[L1: 14.4014]	36.8+0.1s
[12800/15906]	[L1: 14.3614]	36.6+0.1s
[14400/15906]	[L1: 14.3701]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.743 (Best: 18.004 @epoch 129)
Forward: 1.92s

Saving...
Total: 5.29s

[Epoch 133]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.4126]	36.8+1.0s
[3200/15906]	[L1: 14.4292]	36.6+0.1s
[4800/15906]	[L1: 14.2750]	37.1+0.1s
[6400/15906]	[L1: 14.2334]	36.7+0.1s
[8000/15906]	[L1: 14.2579]	37.0+0.2s
[9600/15906]	[L1: 14.2200]	36.8+0.1s
[11200/15906]	[L1: 14.2333]	36.6+0.1s
[12800/15906]	[L1: 14.2696]	37.0+0.1s
[14400/15906]	[L1: 14.3486]	36.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.482 (Best: 18.004 @epoch 129)
Forward: 2.10s

Saving...
Total: 5.50s

[Epoch 134]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.7231]	37.4+0.8s
[3200/15906]	[L1: 14.2693]	37.2+0.1s
[4800/15906]	[L1: 14.4146]	37.2+0.1s
[6400/15906]	[L1: 14.4371]	36.9+0.1s
[8000/15906]	[L1: 14.4885]	37.8+0.1s
[9600/15906]	[L1: 14.5354]	36.8+0.1s
[11200/15906]	[L1: 14.5171]	36.5+0.1s
[12800/15906]	[L1: 14.4779]	36.8+0.1s
[14400/15906]	[L1: 14.4459]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.243 (Best: 18.004 @epoch 129)
Forward: 1.95s

Saving...
Total: 5.38s

[Epoch 135]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.3113]	37.0+0.8s
[3200/15906]	[L1: 14.3405]	37.3+0.1s
[4800/15906]	[L1: 14.3590]	36.9+0.1s
[6400/15906]	[L1: 14.3236]	36.7+0.1s
[8000/15906]	[L1: 14.2499]	37.2+0.1s
[9600/15906]	[L1: 14.2729]	37.2+0.1s
[11200/15906]	[L1: 14.2938]	37.3+0.1s
[12800/15906]	[L1: 14.2918]	37.1+0.1s
[14400/15906]	[L1: 14.2646]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.728 (Best: 18.004 @epoch 129)
Forward: 2.09s

Saving...
Total: 5.48s

[Epoch 136]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.8389]	37.1+0.9s
[3200/15906]	[L1: 14.8225]	38.0+0.1s
[4800/15906]	[L1: 14.8467]	37.2+0.1s
[6400/15906]	[L1: 14.7241]	36.8+0.1s
[8000/15906]	[L1: 14.7617]	37.2+0.1s
[9600/15906]	[L1: 14.6403]	36.6+0.1s
[11200/15906]	[L1: 14.6292]	37.0+0.1s
[12800/15906]	[L1: 14.5971]	36.9+0.1s
[14400/15906]	[L1: 14.5644]	36.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.760 (Best: 18.004 @epoch 129)
Forward: 2.18s

Saving...
Total: 5.63s

[Epoch 137]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.5212]	37.2+1.1s
[3200/15906]	[L1: 14.4042]	36.6+0.1s
[4800/15906]	[L1: 14.3974]	37.6+0.1s
[6400/15906]	[L1: 14.3476]	37.0+0.1s
[8000/15906]	[L1: 14.3673]	37.1+0.1s
[9600/15906]	[L1: 14.4023]	37.1+0.1s
[11200/15906]	[L1: 14.3881]	37.6+0.1s
[12800/15906]	[L1: 14.3939]	36.6+0.1s
[14400/15906]	[L1: 14.3562]	36.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.782 (Best: 18.004 @epoch 129)
Forward: 2.14s

Saving...
Total: 5.51s

[Epoch 138]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.2505]	37.9+1.0s
[3200/15906]	[L1: 14.4328]	36.9+0.1s
[4800/15906]	[L1: 14.4575]	36.7+0.1s
[6400/15906]	[L1: 14.5712]	37.4+0.2s
[8000/15906]	[L1: 14.5765]	37.0+0.1s
[9600/15906]	[L1: 14.5684]	36.8+0.1s
[11200/15906]	[L1: 14.5146]	37.9+0.1s
[12800/15906]	[L1: 14.5438]	37.5+0.1s
[14400/15906]	[L1: 14.4990]	37.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.726 (Best: 18.004 @epoch 129)
Forward: 2.24s

Saving...
Total: 5.62s

[Epoch 139]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.6676]	37.0+0.8s
[3200/15906]	[L1: 14.4497]	37.3+0.1s
[4800/15906]	[L1: 14.4160]	36.7+0.1s
[6400/15906]	[L1: 14.3247]	37.6+0.1s
[8000/15906]	[L1: 14.3402]	36.8+0.1s
[9600/15906]	[L1: 14.3656]	37.1+0.1s
[11200/15906]	[L1: 14.3505]	36.9+0.1s
[12800/15906]	[L1: 14.2913]	37.0+0.1s
[14400/15906]	[L1: 14.2620]	37.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.652 (Best: 18.004 @epoch 129)
Forward: 2.01s

Saving...
Total: 5.48s

[Epoch 140]	Learning rate: 2.50e-5
[1600/15906]	[L1: 13.9042]	37.0+0.9s
[3200/15906]	[L1: 13.9960]	36.6+0.1s
[4800/15906]	[L1: 14.1774]	37.2+0.1s
[6400/15906]	[L1: 14.2057]	37.1+0.1s
[8000/15906]	[L1: 14.2481]	36.9+0.1s
[9600/15906]	[L1: 14.2138]	36.7+0.1s
[11200/15906]	[L1: 14.2290]	36.8+0.1s
[12800/15906]	[L1: 14.2528]	37.0+0.1s
[14400/15906]	[L1: 14.2448]	36.4+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.500 (Best: 18.004 @epoch 129)
Forward: 2.03s

Saving...
Total: 6.43s

[Epoch 141]	Learning rate: 2.50e-5
[1600/15906]	[L1: 13.6964]	37.5+0.9s
[3200/15906]	[L1: 14.0257]	37.2+0.1s
[4800/15906]	[L1: 14.1039]	36.9+0.1s
[6400/15906]	[L1: 14.1873]	37.6+0.1s
[8000/15906]	[L1: 14.3558]	37.5+0.1s
[9600/15906]	[L1: 14.4183]	37.0+0.1s
[11200/15906]	[L1: 14.3814]	36.7+0.1s
[12800/15906]	[L1: 14.4324]	37.7+0.1s
[14400/15906]	[L1: 14.4382]	37.7+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.288 (Best: 18.004 @epoch 129)
Forward: 1.87s

Saving...
Total: 5.28s

[Epoch 142]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.5357]	37.6+0.9s
[3200/15906]	[L1: 14.5041]	36.9+0.1s
[4800/15906]	[L1: 14.3288]	37.2+0.1s
[6400/15906]	[L1: 14.2798]	36.7+0.1s
[8000/15906]	[L1: 14.2680]	38.0+0.1s
[9600/15906]	[L1: 14.1603]	36.6+0.1s
[11200/15906]	[L1: 14.2455]	36.9+0.1s
[12800/15906]	[L1: 14.2512]	36.6+0.1s
[14400/15906]	[L1: 14.2823]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.500 (Best: 18.004 @epoch 129)
Forward: 1.87s

Saving...
Total: 5.30s

[Epoch 143]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.2462]	37.4+1.0s
[3200/15906]	[L1: 14.1987]	37.1+0.1s
[4800/15906]	[L1: 14.3854]	36.7+0.1s
[6400/15906]	[L1: 14.3356]	36.7+0.1s
[8000/15906]	[L1: 14.2579]	36.8+0.1s
[9600/15906]	[L1: 14.2228]	37.1+0.1s
[11200/15906]	[L1: 14.1955]	37.0+0.1s
[12800/15906]	[L1: 14.3005]	37.6+0.1s
[14400/15906]	[L1: 14.2933]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.720 (Best: 18.004 @epoch 129)
Forward: 2.10s

Saving...
Total: 5.48s

[Epoch 144]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.4205]	37.5+0.8s
[3200/15906]	[L1: 14.3082]	37.4+0.1s
[4800/15906]	[L1: 14.1760]	37.0+0.1s
[6400/15906]	[L1: 14.1661]	37.9+0.1s
[8000/15906]	[L1: 14.2109]	36.9+0.1s
[9600/15906]	[L1: 14.1692]	37.5+0.1s
[11200/15906]	[L1: 14.1648]	37.2+0.1s
[12800/15906]	[L1: 14.2049]	37.2+0.1s
[14400/15906]	[L1: 14.1756]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.505 (Best: 18.004 @epoch 129)
Forward: 1.91s

Saving...
Total: 5.34s

[Epoch 145]	Learning rate: 2.50e-5
[1600/15906]	[L1: 13.7945]	37.5+1.0s
[3200/15906]	[L1: 14.0921]	36.7+0.1s
[4800/15906]	[L1: 14.0185]	37.6+0.1s
[6400/15906]	[L1: 14.0857]	37.1+0.1s
[8000/15906]	[L1: 14.1482]	36.6+0.1s
[9600/15906]	[L1: 14.2043]	36.7+0.1s
[11200/15906]	[L1: 14.1832]	36.7+0.1s
[12800/15906]	[L1: 14.1449]	37.4+0.1s
[14400/15906]	[L1: 14.1721]	36.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.340 (Best: 18.004 @epoch 129)
Forward: 2.13s

Saving...
Total: 5.57s

[Epoch 146]	Learning rate: 2.50e-5
[1600/15906]	[L1: 13.8683]	36.9+1.0s
[3200/15906]	[L1: 13.9847]	37.0+0.1s
[4800/15906]	[L1: 14.0671]	37.3+0.1s
[6400/15906]	[L1: 14.2144]	37.1+0.1s
[8000/15906]	[L1: 14.2054]	37.4+0.1s
[9600/15906]	[L1: 14.2272]	36.6+0.1s
[11200/15906]	[L1: 14.2557]	36.5+0.1s
[12800/15906]	[L1: 14.3214]	37.7+0.1s
[14400/15906]	[L1: 14.2967]	36.7+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.350 (Best: 18.004 @epoch 129)
Forward: 2.09s

Saving...
Total: 5.47s

[Epoch 147]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.0666]	38.3+1.0s
[3200/15906]	[L1: 14.1507]	37.4+0.1s
[4800/15906]	[L1: 14.2331]	36.8+0.1s
[6400/15906]	[L1: 14.1971]	37.6+0.1s
[8000/15906]	[L1: 14.1803]	36.7+0.1s
[9600/15906]	[L1: 14.3125]	36.9+0.1s
[11200/15906]	[L1: 14.2670]	37.1+0.1s
[12800/15906]	[L1: 14.3362]	37.3+0.1s
[14400/15906]	[L1: 14.3319]	37.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.097 (Best: 18.004 @epoch 129)
Forward: 2.13s

Saving...
Total: 5.59s

[Epoch 148]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.3899]	37.5+1.1s
[3200/15906]	[L1: 14.2608]	37.5+0.1s
[4800/15906]	[L1: 14.2933]	36.8+0.1s
[6400/15906]	[L1: 14.3466]	37.4+0.1s
[8000/15906]	[L1: 14.3760]	36.5+0.1s
[9600/15906]	[L1: 14.3554]	37.2+0.1s
[11200/15906]	[L1: 14.3196]	37.2+0.1s
[12800/15906]	[L1: 14.2859]	37.0+0.1s
[14400/15906]	[L1: 14.2621]	37.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.537 (Best: 18.004 @epoch 129)
Forward: 2.03s

Saving...
Total: 5.42s

[Epoch 149]	Learning rate: 2.50e-5
[1600/15906]	[L1: 14.7431]	37.9+0.9s
[3200/15906]	[L1: 14.6761]	36.8+0.1s
[4800/15906]	[L1: 14.5296]	37.1+0.1s
[6400/15906]	[L1: 14.6114]	36.7+0.1s
[8000/15906]	[L1: 14.5397]	37.7+0.1s
[9600/15906]	[L1: 14.5785]	37.0+0.1s
[11200/15906]	[L1: 14.4879]	36.9+0.1s
[12800/15906]	[L1: 14.4699]	37.2+0.1s
[14400/15906]	[L1: 14.4334]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.159 (Best: 18.004 @epoch 129)
Forward: 2.02s

Saving...
Total: 5.45s

[Epoch 150]	Learning rate: 2.50e-5
[1600/15906]	[L1: 13.8322]	38.0+0.8s
[3200/15906]	[L1: 13.9764]	37.3+0.1s
[4800/15906]	[L1: 14.0998]	37.1+0.1s
[6400/15906]	[L1: 14.2295]	37.4+0.1s
[8000/15906]	[L1: 14.2182]	37.2+0.1s
[9600/15906]	[L1: 14.2317]	37.3+0.1s
[11200/15906]	[L1: 14.2229]	36.9+0.1s
[12800/15906]	[L1: 14.2317]	37.4+0.1s
[14400/15906]	[L1: 14.2300]	37.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.852 (Best: 18.004 @epoch 129)
Forward: 2.04s

Saving...
Total: 5.44s

[Epoch 151]	Learning rate: 6.25e-6
[1600/15906]	[L1: 14.0474]	37.4+0.8s
[3200/15906]	[L1: 13.9090]	37.0+0.1s
[4800/15906]	[L1: 13.8693]	36.6+0.1s
[6400/15906]	[L1: 13.9236]	36.6+0.1s
[8000/15906]	[L1: 13.9092]	37.6+0.1s
[9600/15906]	[L1: 13.8921]	36.8+0.1s
[11200/15906]	[L1: 13.8890]	37.0+0.1s
[12800/15906]	[L1: 13.8519]	37.9+0.1s
[14400/15906]	[L1: 13.8960]	36.9+0.2s

Evaluation:
[SRRAW x8]	PSNR: 17.589 (Best: 18.004 @epoch 129)
Forward: 2.04s

Saving...
Total: 5.41s

[Epoch 152]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.5373]	37.0+0.9s
[3200/15906]	[L1: 13.5150]	37.2+0.1s
[4800/15906]	[L1: 13.7374]	37.5+0.1s
[6400/15906]	[L1: 13.5648]	37.3+0.1s
[8000/15906]	[L1: 13.6351]	37.2+0.1s
[9600/15906]	[L1: 13.7534]	37.3+0.1s
[11200/15906]	[L1: 13.7103]	37.1+0.1s
[12800/15906]	[L1: 13.6729]	37.7+0.1s
[14400/15906]	[L1: 13.6729]	37.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.837 (Best: 18.004 @epoch 129)
Forward: 1.82s

Saving...
Total: 5.28s

[Epoch 153]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.1779]	36.9+1.1s
[3200/15906]	[L1: 13.2829]	36.5+0.1s
[4800/15906]	[L1: 13.3409]	37.0+0.1s
[6400/15906]	[L1: 13.3241]	37.4+0.1s
[8000/15906]	[L1: 13.3656]	37.1+0.1s
[9600/15906]	[L1: 13.4356]	36.8+0.1s
[11200/15906]	[L1: 13.5118]	37.3+0.1s
[12800/15906]	[L1: 13.5832]	36.8+0.2s
[14400/15906]	[L1: 13.5943]	37.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.669 (Best: 18.004 @epoch 129)
Forward: 2.05s

Saving...
Total: 5.49s

[Epoch 154]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.3241]	37.6+1.1s
[3200/15906]	[L1: 13.5119]	37.0+0.2s
[4800/15906]	[L1: 13.4602]	37.3+0.1s
[6400/15906]	[L1: 13.4534]	37.5+0.1s
[8000/15906]	[L1: 13.4694]	37.6+0.1s
[9600/15906]	[L1: 13.4858]	37.2+0.1s
[11200/15906]	[L1: 13.5131]	37.3+0.1s
[12800/15906]	[L1: 13.5285]	36.2+0.1s
[14400/15906]	[L1: 13.5454]	36.9+0.2s

Evaluation:
[SRRAW x8]	PSNR: 17.584 (Best: 18.004 @epoch 129)
Forward: 2.05s

Saving...
Total: 5.46s

[Epoch 155]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.8975]	36.9+0.9s
[3200/15906]	[L1: 13.8648]	37.0+0.1s
[4800/15906]	[L1: 13.7969]	36.7+0.1s
[6400/15906]	[L1: 13.7930]	37.4+0.1s
[8000/15906]	[L1: 13.7424]	37.2+0.1s
[9600/15906]	[L1: 13.7093]	37.4+0.1s
[11200/15906]	[L1: 13.7071]	36.7+0.1s
[12800/15906]	[L1: 13.7526]	37.0+0.1s
[14400/15906]	[L1: 13.7431]	37.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.446 (Best: 18.004 @epoch 129)
Forward: 1.83s

Saving...
Total: 5.25s

[Epoch 156]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.5533]	37.2+0.9s
[3200/15906]	[L1: 13.6012]	37.3+0.1s
[4800/15906]	[L1: 13.6570]	36.8+0.1s
[6400/15906]	[L1: 13.6626]	37.0+0.1s
[8000/15906]	[L1: 13.7043]	37.6+0.1s
[9600/15906]	[L1: 13.6382]	36.6+0.1s
[11200/15906]	[L1: 13.6376]	37.0+0.1s
[12800/15906]	[L1: 13.6485]	36.7+0.1s
[14400/15906]	[L1: 13.6282]	37.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.655 (Best: 18.004 @epoch 129)
Forward: 1.86s

Saving...
Total: 5.24s

[Epoch 157]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.4406]	36.8+1.0s
[3200/15906]	[L1: 13.4649]	37.4+0.1s
[4800/15906]	[L1: 13.4665]	37.4+0.1s
[6400/15906]	[L1: 13.4051]	37.6+0.1s
[8000/15906]	[L1: 13.4724]	37.2+0.1s
[9600/15906]	[L1: 13.4852]	37.4+0.1s
[11200/15906]	[L1: 13.5090]	37.7+0.1s
[12800/15906]	[L1: 13.5021]	37.6+0.1s
[14400/15906]	[L1: 13.4955]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.734 (Best: 18.004 @epoch 129)
Forward: 1.86s

Saving...
Total: 5.29s

[Epoch 158]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.6726]	38.7+1.0s
[3200/15906]	[L1: 13.6444]	37.1+0.1s
[4800/15906]	[L1: 13.6507]	37.0+0.1s
[6400/15906]	[L1: 13.7035]	37.0+0.1s
[8000/15906]	[L1: 13.6488]	37.3+0.2s
[9600/15906]	[L1: 13.7048]	37.4+0.1s
[11200/15906]	[L1: 13.6980]	36.9+0.1s
[12800/15906]	[L1: 13.6760]	36.7+0.1s
[14400/15906]	[L1: 13.6891]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.917 (Best: 18.004 @epoch 129)
Forward: 2.03s

Saving...
Total: 5.45s

[Epoch 159]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.3705]	37.5+1.0s
[3200/15906]	[L1: 13.5601]	36.8+0.1s
[4800/15906]	[L1: 13.5708]	37.1+0.1s
[6400/15906]	[L1: 13.5576]	36.5+0.1s
[8000/15906]	[L1: 13.5291]	37.3+0.1s
[9600/15906]	[L1: 13.5395]	37.2+0.1s
[11200/15906]	[L1: 13.5037]	36.5+0.1s
[12800/15906]	[L1: 13.4733]	37.0+0.1s
[14400/15906]	[L1: 13.5048]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.488 (Best: 18.004 @epoch 129)
Forward: 2.09s

Saving...
Total: 5.48s

[Epoch 160]	Learning rate: 1.25e-5
[1600/15906]	[L1: 14.0199]	37.4+0.9s
[3200/15906]	[L1: 13.7224]	37.4+0.1s
[4800/15906]	[L1: 13.6396]	36.7+0.1s
[6400/15906]	[L1: 13.8116]	37.4+0.1s
[8000/15906]	[L1: 13.7500]	37.5+0.1s
[9600/15906]	[L1: 13.7825]	37.0+0.1s
[11200/15906]	[L1: 13.7436]	36.9+0.1s
[12800/15906]	[L1: 13.7327]	36.8+0.1s
[14400/15906]	[L1: 13.6983]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.318 (Best: 18.004 @epoch 129)
Forward: 2.20s

Saving...
Total: 5.62s

[Epoch 161]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.7135]	37.3+0.9s
[3200/15906]	[L1: 13.9339]	37.3+0.1s
[4800/15906]	[L1: 13.6991]	36.6+0.1s
[6400/15906]	[L1: 13.6880]	37.2+0.1s
[8000/15906]	[L1: 13.6298]	37.4+0.1s
[9600/15906]	[L1: 13.6176]	37.4+0.1s
[11200/15906]	[L1: 13.6147]	36.4+0.1s
[12800/15906]	[L1: 13.5446]	37.3+0.1s
[14400/15906]	[L1: 13.5329]	37.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.576 (Best: 18.004 @epoch 129)
Forward: 2.12s

Saving...
Total: 5.50s

[Epoch 162]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.7450]	38.4+0.9s
[3200/15906]	[L1: 13.7263]	37.3+0.1s
[4800/15906]	[L1: 13.7173]	36.8+0.1s
[6400/15906]	[L1: 13.6732]	36.8+0.1s
[8000/15906]	[L1: 13.6431]	37.5+0.1s
[9600/15906]	[L1: 13.5621]	37.3+0.1s
[11200/15906]	[L1: 13.5143]	37.6+0.1s
[12800/15906]	[L1: 13.4892]	36.9+0.1s
[14400/15906]	[L1: 13.5224]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.651 (Best: 18.004 @epoch 129)
Forward: 2.10s

Saving...
Total: 5.51s

[Epoch 163]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.5078]	37.7+0.8s
[3200/15906]	[L1: 13.3898]	37.4+0.1s
[4800/15906]	[L1: 13.5424]	37.5+0.1s
[6400/15906]	[L1: 13.5570]	37.5+0.1s
[8000/15906]	[L1: 13.5546]	37.1+0.1s
[9600/15906]	[L1: 13.5503]	37.1+0.1s
[11200/15906]	[L1: 13.5646]	37.1+0.1s
[12800/15906]	[L1: 13.5518]	37.0+0.1s
[14400/15906]	[L1: 13.5671]	37.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.742 (Best: 18.004 @epoch 129)
Forward: 2.06s

Saving...
Total: 5.48s

[Epoch 164]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.7517]	37.4+1.1s
[3200/15906]	[L1: 13.8068]	37.1+0.1s
[4800/15906]	[L1: 13.9051]	37.5+0.1s
[6400/15906]	[L1: 13.8126]	37.8+0.1s
[8000/15906]	[L1: 13.7422]	36.8+0.1s
[9600/15906]	[L1: 13.6911]	36.9+0.1s
[11200/15906]	[L1: 13.6665]	37.4+0.1s
[12800/15906]	[L1: 13.6817]	37.0+0.1s
[14400/15906]	[L1: 13.6639]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.649 (Best: 18.004 @epoch 129)
Forward: 2.41s

Saving...
Total: 5.82s

[Epoch 165]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.1852]	37.8+0.9s
[3200/15906]	[L1: 13.4308]	37.0+0.1s
[4800/15906]	[L1: 13.5143]	37.4+0.1s
[6400/15906]	[L1: 13.5083]	37.0+0.1s
[8000/15906]	[L1: 13.4489]	37.5+0.1s
[9600/15906]	[L1: 13.4741]	37.2+0.1s
[11200/15906]	[L1: 13.4645]	37.4+0.1s
[12800/15906]	[L1: 13.4108]	37.1+0.1s
[14400/15906]	[L1: 13.3962]	36.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.621 (Best: 18.004 @epoch 129)
Forward: 1.99s

Saving...
Total: 5.38s

[Epoch 166]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.4376]	37.7+1.1s
[3200/15906]	[L1: 13.4254]	37.0+0.1s
[4800/15906]	[L1: 13.7414]	37.0+0.1s
[6400/15906]	[L1: 13.6730]	36.6+0.1s
[8000/15906]	[L1: 13.5853]	37.3+0.1s
[9600/15906]	[L1: 13.5862]	37.2+0.1s
[11200/15906]	[L1: 13.5903]	37.0+0.1s
[12800/15906]	[L1: 13.5715]	36.9+0.1s
[14400/15906]	[L1: 13.5139]	37.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.782 (Best: 18.004 @epoch 129)
Forward: 2.16s

Saving...
Total: 5.59s

[Epoch 167]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.7434]	37.4+0.8s
[3200/15906]	[L1: 13.4187]	36.8+0.1s
[4800/15906]	[L1: 13.4110]	36.7+0.1s
[6400/15906]	[L1: 13.3714]	37.1+0.2s
[8000/15906]	[L1: 13.4586]	37.3+0.1s
[9600/15906]	[L1: 13.4311]	36.8+0.1s
[11200/15906]	[L1: 13.5115]	37.4+0.1s
[12800/15906]	[L1: 13.4836]	37.5+0.1s
[14400/15906]	[L1: 13.4683]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.669 (Best: 18.004 @epoch 129)
Forward: 1.95s

Saving...
Total: 5.33s

[Epoch 168]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.4821]	37.9+1.0s
[3200/15906]	[L1: 13.5862]	37.8+0.1s
[4800/15906]	[L1: 13.4743]	36.7+0.1s
[6400/15906]	[L1: 13.4780]	37.1+0.1s
[8000/15906]	[L1: 13.3947]	37.5+0.1s
[9600/15906]	[L1: 13.4410]	37.2+0.1s
[11200/15906]	[L1: 13.4028]	38.1+0.1s
[12800/15906]	[L1: 13.3293]	37.0+0.1s
[14400/15906]	[L1: 13.3606]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.436 (Best: 18.004 @epoch 129)
Forward: 2.40s

Saving...
Total: 5.80s

[Epoch 169]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.3601]	38.0+0.9s
[3200/15906]	[L1: 13.5159]	37.3+0.1s
[4800/15906]	[L1: 13.3616]	36.9+0.1s
[6400/15906]	[L1: 13.3831]	37.1+0.2s
[8000/15906]	[L1: 13.3000]	37.0+0.1s
[9600/15906]	[L1: 13.2934]	37.1+0.1s
[11200/15906]	[L1: 13.3528]	37.3+0.1s
[12800/15906]	[L1: 13.4012]	36.7+0.1s
[14400/15906]	[L1: 13.4137]	37.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.721 (Best: 18.004 @epoch 129)
Forward: 1.99s

Saving...
Total: 5.42s

[Epoch 170]	Learning rate: 1.25e-5
[1600/15906]	[L1: 12.9190]	37.9+1.0s
[3200/15906]	[L1: 12.9581]	37.7+0.1s
[4800/15906]	[L1: 13.0595]	37.1+0.1s
[6400/15906]	[L1: 13.1902]	37.0+0.1s
[8000/15906]	[L1: 13.1950]	37.1+0.1s
[9600/15906]	[L1: 13.2050]	38.5+0.1s
[11200/15906]	[L1: 13.2832]	37.6+0.1s
[12800/15906]	[L1: 13.3537]	37.7+0.1s
[14400/15906]	[L1: 13.3640]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.706 (Best: 18.004 @epoch 129)
Forward: 2.09s

Saving...
Total: 5.47s

[Epoch 171]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.5726]	37.0+1.0s
[3200/15906]	[L1: 13.5359]	37.3+0.2s
[4800/15906]	[L1: 13.7044]	37.0+0.1s
[6400/15906]	[L1: 13.6318]	36.7+0.1s
[8000/15906]	[L1: 13.5674]	36.5+0.1s
[9600/15906]	[L1: 13.5273]	37.6+0.1s
[11200/15906]	[L1: 13.4896]	37.6+0.1s
[12800/15906]	[L1: 13.5016]	37.5+0.1s
[14400/15906]	[L1: 13.5427]	36.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.403 (Best: 18.004 @epoch 129)
Forward: 2.01s

Saving...
Total: 5.44s

[Epoch 172]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.2645]	37.6+0.9s
[3200/15906]	[L1: 13.5807]	36.8+0.1s
[4800/15906]	[L1: 13.5105]	37.5+0.1s
[6400/15906]	[L1: 13.4337]	37.1+0.1s
[8000/15906]	[L1: 13.3978]	36.8+0.1s
[9600/15906]	[L1: 13.3474]	37.9+0.1s
[11200/15906]	[L1: 13.3812]	36.6+0.1s
[12800/15906]	[L1: 13.4213]	36.4+0.1s
[14400/15906]	[L1: 13.4011]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.995 (Best: 18.004 @epoch 129)
Forward: 2.11s

Saving...
Total: 5.51s

[Epoch 173]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.2264]	37.9+0.9s
[3200/15906]	[L1: 13.4071]	37.3+0.1s
[4800/15906]	[L1: 13.4273]	37.2+0.1s
[6400/15906]	[L1: 13.4659]	37.1+0.1s
[8000/15906]	[L1: 13.4817]	37.6+0.1s
[9600/15906]	[L1: 13.4494]	37.3+0.1s
[11200/15906]	[L1: 13.4833]	37.0+0.1s
[12800/15906]	[L1: 13.4682]	37.9+0.1s
[14400/15906]	[L1: 13.3981]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.775 (Best: 18.004 @epoch 129)
Forward: 1.92s

Saving...
Total: 6.32s

[Epoch 174]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.7272]	38.6+0.9s
[3200/15906]	[L1: 13.5581]	36.6+0.1s
[4800/15906]	[L1: 13.4221]	37.0+0.1s
[6400/15906]	[L1: 13.4101]	37.2+0.1s
[8000/15906]	[L1: 13.4304]	36.7+0.1s
[9600/15906]	[L1: 13.5254]	36.5+0.1s
[11200/15906]	[L1: 13.4533]	37.0+0.1s
[12800/15906]	[L1: 13.4406]	37.0+0.1s
[14400/15906]	[L1: 13.4413]	37.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.735 (Best: 18.004 @epoch 129)
Forward: 2.17s

Saving...
Total: 5.60s

[Epoch 175]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.2871]	37.2+0.9s
[3200/15906]	[L1: 13.1903]	36.9+0.1s
[4800/15906]	[L1: 13.1623]	36.5+0.1s
[6400/15906]	[L1: 13.2104]	36.8+0.1s
[8000/15906]	[L1: 13.2231]	37.2+0.1s
[9600/15906]	[L1: 13.2271]	37.3+0.1s
[11200/15906]	[L1: 13.2209]	37.1+0.1s
[12800/15906]	[L1: 13.2288]	36.8+0.1s
[14400/15906]	[L1: 13.2177]	36.5+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.758 (Best: 18.004 @epoch 129)
Forward: 2.10s

Saving...
Total: 5.51s

[Epoch 176]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.2110]	37.0+1.0s
[3200/15906]	[L1: 13.3441]	37.0+0.1s
[4800/15906]	[L1: 13.4004]	37.2+0.1s
[6400/15906]	[L1: 13.4415]	37.6+0.1s
[8000/15906]	[L1: 13.4404]	37.0+0.1s
[9600/15906]	[L1: 13.3657]	37.2+0.1s
[11200/15906]	[L1: 13.3713]	37.2+0.1s
[12800/15906]	[L1: 13.3598]	37.0+0.1s
[14400/15906]	[L1: 13.3152]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.639 (Best: 18.004 @epoch 129)
Forward: 2.03s

Saving...
Total: 6.47s

[Epoch 177]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.3164]	37.9+0.9s
[3200/15906]	[L1: 13.3211]	37.2+0.1s
[4800/15906]	[L1: 13.3715]	37.1+0.1s
[6400/15906]	[L1: 13.2387]	36.7+0.1s
[8000/15906]	[L1: 13.2786]	37.2+0.1s
[9600/15906]	[L1: 13.2794]	37.7+0.1s
[11200/15906]	[L1: 13.2681]	37.5+0.1s
[12800/15906]	[L1: 13.2970]	37.0+0.1s
[14400/15906]	[L1: 13.2724]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.822 (Best: 18.004 @epoch 129)
Forward: 1.88s

Saving...
Total: 5.27s

[Epoch 178]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.5255]	37.6+1.2s
[3200/15906]	[L1: 13.5259]	37.1+0.1s
[4800/15906]	[L1: 13.4124]	37.0+0.1s
[6400/15906]	[L1: 13.3556]	37.0+0.1s
[8000/15906]	[L1: 13.3880]	36.9+0.1s
[9600/15906]	[L1: 13.3395]	36.9+0.1s
[11200/15906]	[L1: 13.2878]	37.3+0.1s
[12800/15906]	[L1: 13.2765]	36.9+0.1s
[14400/15906]	[L1: 13.2478]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.682 (Best: 18.004 @epoch 129)
Forward: 1.95s

Saving...
Total: 5.35s

[Epoch 179]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.4925]	38.2+0.9s
[3200/15906]	[L1: 13.3291]	37.3+0.1s
[4800/15906]	[L1: 13.3109]	37.4+0.1s
[6400/15906]	[L1: 13.2953]	36.9+0.1s
[8000/15906]	[L1: 13.2553]	37.3+0.1s
[9600/15906]	[L1: 13.2784]	37.5+0.1s
[11200/15906]	[L1: 13.2905]	37.0+0.1s
[12800/15906]	[L1: 13.2953]	37.4+0.1s
[14400/15906]	[L1: 13.2578]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.397 (Best: 18.004 @epoch 129)
Forward: 2.18s

Saving...
Total: 5.60s

[Epoch 180]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.2297]	37.4+0.9s
[3200/15906]	[L1: 13.2783]	36.6+0.1s
[4800/15906]	[L1: 13.2956]	37.5+0.1s
[6400/15906]	[L1: 13.2918]	37.4+0.1s
[8000/15906]	[L1: 13.2172]	36.9+0.1s
[9600/15906]	[L1: 13.2372]	37.0+0.1s
[11200/15906]	[L1: 13.2603]	37.1+0.1s
[12800/15906]	[L1: 13.2371]	36.9+0.1s
[14400/15906]	[L1: 13.1961]	36.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.481 (Best: 18.004 @epoch 129)
Forward: 1.99s

Saving...
Total: 5.39s

[Epoch 181]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.0071]	36.9+1.1s
[3200/15906]	[L1: 13.1889]	36.8+0.1s
[4800/15906]	[L1: 13.2398]	37.2+0.1s
[6400/15906]	[L1: 13.2403]	37.4+0.1s
[8000/15906]	[L1: 13.2829]	37.2+0.1s
[9600/15906]	[L1: 13.2636]	37.3+0.1s
[11200/15906]	[L1: 13.2613]	37.0+0.1s
[12800/15906]	[L1: 13.1890]	36.4+0.1s
[14400/15906]	[L1: 13.1968]	37.5+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.705 (Best: 18.004 @epoch 129)
Forward: 2.13s

Saving...
Total: 5.53s

[Epoch 182]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.4577]	37.6+0.9s
[3200/15906]	[L1: 13.3321]	36.6+0.1s
[4800/15906]	[L1: 13.2198]	37.2+0.1s
[6400/15906]	[L1: 13.1648]	38.1+0.2s
[8000/15906]	[L1: 13.1796]	37.4+0.1s
[9600/15906]	[L1: 13.1461]	37.0+0.1s
[11200/15906]	[L1: 13.1445]	37.7+0.1s
[12800/15906]	[L1: 13.1675]	37.2+0.1s
[14400/15906]	[L1: 13.1922]	37.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.611 (Best: 18.004 @epoch 129)
Forward: 2.00s

Saving...
Total: 6.41s

[Epoch 183]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.2622]	38.1+0.8s
[3200/15906]	[L1: 13.4190]	36.6+0.1s
[4800/15906]	[L1: 13.4005]	37.6+0.1s
[6400/15906]	[L1: 13.4337]	37.0+0.1s
[8000/15906]	[L1: 13.3323]	37.7+0.1s
[9600/15906]	[L1: 13.2845]	37.2+0.1s
[11200/15906]	[L1: 13.2703]	37.1+0.1s
[12800/15906]	[L1: 13.2956]	36.4+0.1s
[14400/15906]	[L1: 13.2969]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.541 (Best: 18.004 @epoch 129)
Forward: 2.11s

Saving...
Total: 5.49s

[Epoch 184]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.7117]	37.8+0.9s
[3200/15906]	[L1: 13.6460]	37.0+0.1s
[4800/15906]	[L1: 13.4402]	38.2+0.1s
[6400/15906]	[L1: 13.3423]	36.8+0.1s
[8000/15906]	[L1: 13.3246]	37.0+0.1s
[9600/15906]	[L1: 13.3693]	37.5+0.1s
[11200/15906]	[L1: 13.3709]	36.8+0.1s
[12800/15906]	[L1: 13.3698]	37.2+0.1s
[14400/15906]	[L1: 13.4002]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.292 (Best: 18.004 @epoch 129)
Forward: 2.22s

Saving...
Total: 5.65s

[Epoch 185]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.3601]	37.7+0.9s
[3200/15906]	[L1: 13.3715]	37.4+0.1s
[4800/15906]	[L1: 13.4254]	36.6+0.1s
[6400/15906]	[L1: 13.3276]	36.9+0.1s
[8000/15906]	[L1: 13.3191]	37.9+0.1s
[9600/15906]	[L1: 13.3011]	37.3+0.1s
[11200/15906]	[L1: 13.2935]	36.7+0.1s
[12800/15906]	[L1: 13.2493]	36.6+0.1s
[14400/15906]	[L1: 13.2199]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.658 (Best: 18.004 @epoch 129)
Forward: 1.82s

Saving...
Total: 5.23s

[Epoch 186]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.2084]	37.2+1.1s
[3200/15906]	[L1: 13.2616]	36.9+0.1s
[4800/15906]	[L1: 13.0783]	37.0+0.1s
[6400/15906]	[L1: 13.0950]	36.8+0.1s
[8000/15906]	[L1: 13.1641]	37.4+0.1s
[9600/15906]	[L1: 13.2827]	37.2+0.1s
[11200/15906]	[L1: 13.3146]	37.3+0.1s
[12800/15906]	[L1: 13.3481]	36.8+0.1s
[14400/15906]	[L1: 13.3151]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.593 (Best: 18.004 @epoch 129)
Forward: 2.08s

Saving...
Total: 5.47s

[Epoch 187]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.1999]	37.5+1.0s
[3200/15906]	[L1: 13.1795]	36.9+0.1s
[4800/15906]	[L1: 13.2164]	37.3+0.1s
[6400/15906]	[L1: 13.2276]	37.0+0.1s
[8000/15906]	[L1: 13.1944]	36.9+0.1s
[9600/15906]	[L1: 13.2192]	37.7+0.1s
[11200/15906]	[L1: 13.1809]	37.3+0.1s
[12800/15906]	[L1: 13.2047]	37.0+0.1s
[14400/15906]	[L1: 13.2260]	37.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.505 (Best: 18.004 @epoch 129)
Forward: 1.95s

Saving...
Total: 5.37s

[Epoch 188]	Learning rate: 1.25e-5
[1600/15906]	[L1: 12.9158]	37.8+1.0s
[3200/15906]	[L1: 13.1299]	36.7+0.1s
[4800/15906]	[L1: 13.1302]	37.0+0.1s
[6400/15906]	[L1: 13.2579]	37.1+0.1s
[8000/15906]	[L1: 13.2813]	37.7+0.1s
[9600/15906]	[L1: 13.3088]	37.4+0.1s
[11200/15906]	[L1: 13.2878]	37.3+0.1s
[12800/15906]	[L1: 13.2476]	37.5+0.1s
[14400/15906]	[L1: 13.2825]	36.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.742 (Best: 18.004 @epoch 129)
Forward: 1.91s

Saving...
Total: 5.28s

[Epoch 189]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.2847]	38.8+0.8s
[3200/15906]	[L1: 13.4117]	37.3+0.1s
[4800/15906]	[L1: 13.5141]	38.1+0.1s
[6400/15906]	[L1: 13.3584]	37.2+0.1s
[8000/15906]	[L1: 13.2061]	37.3+0.1s
[9600/15906]	[L1: 13.1643]	37.3+0.1s
[11200/15906]	[L1: 13.1176]	37.6+0.1s
[12800/15906]	[L1: 13.1417]	37.6+0.1s
[14400/15906]	[L1: 13.1443]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.720 (Best: 18.004 @epoch 129)
Forward: 2.28s

Saving...
Total: 5.72s

[Epoch 190]	Learning rate: 1.25e-5
[1600/15906]	[L1: 12.8007]	37.4+1.1s
[3200/15906]	[L1: 12.9367]	37.1+0.1s
[4800/15906]	[L1: 12.9905]	37.3+0.1s
[6400/15906]	[L1: 13.0240]	37.3+0.1s
[8000/15906]	[L1: 13.1256]	37.0+0.1s
[9600/15906]	[L1: 13.1084]	36.7+0.1s
[11200/15906]	[L1: 13.1314]	37.7+0.1s
[12800/15906]	[L1: 13.1410]	37.1+0.1s
[14400/15906]	[L1: 13.1233]	37.7+0.2s

Evaluation:
[SRRAW x8]	PSNR: 17.173 (Best: 18.004 @epoch 129)
Forward: 2.13s

Saving...
Total: 5.56s

[Epoch 191]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.2291]	37.3+1.2s
[3200/15906]	[L1: 13.2219]	36.7+0.1s
[4800/15906]	[L1: 13.2823]	37.2+0.1s
[6400/15906]	[L1: 13.1653]	37.3+0.1s
[8000/15906]	[L1: 13.2428]	38.4+0.1s
[9600/15906]	[L1: 13.2102]	37.7+0.1s
[11200/15906]	[L1: 13.2051]	38.0+0.1s
[12800/15906]	[L1: 13.1771]	37.4+0.1s
[14400/15906]	[L1: 13.2352]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.470 (Best: 18.004 @epoch 129)
Forward: 2.05s

Saving...
Total: 5.43s

[Epoch 192]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.1903]	37.6+1.1s
[3200/15906]	[L1: 13.1271]	37.3+0.1s
[4800/15906]	[L1: 12.9863]	36.9+0.1s
[6400/15906]	[L1: 13.1056]	37.2+0.1s
[8000/15906]	[L1: 13.2032]	37.2+0.1s
[9600/15906]	[L1: 13.1743]	37.1+0.1s
[11200/15906]	[L1: 13.2486]	37.7+0.1s
[12800/15906]	[L1: 13.2424]	37.1+0.1s
[14400/15906]	[L1: 13.2234]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.774 (Best: 18.004 @epoch 129)
Forward: 1.93s

Saving...
Total: 5.35s

[Epoch 193]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.0260]	37.6+0.9s
[3200/15906]	[L1: 12.9652]	37.5+0.1s
[4800/15906]	[L1: 12.9688]	37.6+0.1s
[6400/15906]	[L1: 12.8957]	36.9+0.1s
[8000/15906]	[L1: 12.9627]	36.3+0.1s
[9600/15906]	[L1: 13.0108]	37.2+0.1s
[11200/15906]	[L1: 13.0708]	36.5+0.1s
[12800/15906]	[L1: 13.0871]	37.5+0.1s
[14400/15906]	[L1: 13.1388]	37.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.331 (Best: 18.004 @epoch 129)
Forward: 2.14s

Saving...
Total: 5.54s

[Epoch 194]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.4388]	37.5+1.1s
[3200/15906]	[L1: 13.1310]	37.6+0.1s
[4800/15906]	[L1: 12.9687]	37.7+0.1s
[6400/15906]	[L1: 13.1870]	37.6+0.1s
[8000/15906]	[L1: 13.1393]	37.6+0.1s
[9600/15906]	[L1: 13.1872]	37.4+0.1s
[11200/15906]	[L1: 13.2142]	36.9+0.1s
[12800/15906]	[L1: 13.1832]	37.0+0.1s
[14400/15906]	[L1: 13.2540]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 18.056 (Best: 18.056 @epoch 194)
Forward: 1.87s

Saving...
Total: 5.37s

[Epoch 195]	Learning rate: 1.25e-5
[1600/15906]	[L1: 12.9107]	37.4+0.8s
[3200/15906]	[L1: 13.0103]	36.8+0.1s
[4800/15906]	[L1: 13.0751]	37.3+0.1s
[6400/15906]	[L1: 13.2104]	37.0+0.1s
[8000/15906]	[L1: 13.2537]	37.0+0.1s
[9600/15906]	[L1: 13.2395]	37.4+0.1s
[11200/15906]	[L1: 13.2798]	37.7+0.1s
[12800/15906]	[L1: 13.2698]	38.0+0.1s
[14400/15906]	[L1: 13.2112]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.567 (Best: 18.056 @epoch 194)
Forward: 2.04s

Saving...
Total: 5.50s

[Epoch 196]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.2597]	37.0+1.0s
[3200/15906]	[L1: 13.2264]	37.0+0.1s
[4800/15906]	[L1: 13.3811]	37.5+0.1s
[6400/15906]	[L1: 13.2966]	37.0+0.1s
[8000/15906]	[L1: 13.3073]	36.9+0.1s
[9600/15906]	[L1: 13.3120]	36.4+0.1s
[11200/15906]	[L1: 13.2313]	37.8+0.1s
[12800/15906]	[L1: 13.2283]	37.0+0.1s
[14400/15906]	[L1: 13.2280]	37.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.770 (Best: 18.056 @epoch 194)
Forward: 2.09s

Saving...
Total: 5.49s

[Epoch 197]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.4867]	37.0+0.8s
[3200/15906]	[L1: 13.8053]	37.6+0.1s
[4800/15906]	[L1: 13.6740]	37.0+0.1s
[6400/15906]	[L1: 13.6645]	37.2+0.1s
[8000/15906]	[L1: 13.6422]	37.6+0.1s
[9600/15906]	[L1: 13.5569]	37.2+0.1s
[11200/15906]	[L1: 13.5148]	36.7+0.1s
[12800/15906]	[L1: 13.4311]	36.5+0.1s
[14400/15906]	[L1: 13.3686]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.526 (Best: 18.056 @epoch 194)
Forward: 1.89s

Saving...
Total: 5.32s

[Epoch 198]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.2954]	37.2+1.0s
[3200/15906]	[L1: 13.1705]	37.6+0.1s
[4800/15906]	[L1: 13.1704]	37.6+0.1s
[6400/15906]	[L1: 13.1204]	37.5+0.1s
[8000/15906]	[L1: 13.0630]	37.6+0.1s
[9600/15906]	[L1: 13.0502]	37.8+0.1s
[11200/15906]	[L1: 13.0448]	37.5+0.1s
[12800/15906]	[L1: 13.0590]	37.6+0.1s
[14400/15906]	[L1: 13.0486]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.505 (Best: 18.056 @epoch 194)
Forward: 1.70s

Saving...
Total: 5.10s

[Epoch 199]	Learning rate: 1.25e-5
[1600/15906]	[L1: 12.9418]	37.4+0.9s
[3200/15906]	[L1: 13.2162]	37.0+0.1s
[4800/15906]	[L1: 13.2308]	37.4+0.1s
[6400/15906]	[L1: 13.1847]	37.6+0.1s
[8000/15906]	[L1: 13.1694]	37.0+0.1s
[9600/15906]	[L1: 13.2372]	37.4+0.1s
[11200/15906]	[L1: 13.2423]	37.2+0.1s
[12800/15906]	[L1: 13.2213]	37.2+0.1s
[14400/15906]	[L1: 13.1782]	37.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.300 (Best: 18.056 @epoch 194)
Forward: 1.85s

Saving...
Total: 5.23s

[Epoch 200]	Learning rate: 1.25e-5
[1600/15906]	[L1: 13.1066]	36.8+1.1s
[3200/15906]	[L1: 12.9486]	37.4+0.1s
[4800/15906]	[L1: 12.9416]	37.6+0.1s
[6400/15906]	[L1: 12.9429]	37.2+0.1s
[8000/15906]	[L1: 13.0512]	36.9+0.1s
[9600/15906]	[L1: 13.0473]	37.2+0.1s
[11200/15906]	[L1: 13.1360]	37.9+0.1s
[12800/15906]	[L1: 13.1290]	36.8+0.1s
[14400/15906]	[L1: 13.1084]	36.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.403 (Best: 18.056 @epoch 194)
Forward: 1.95s

Saving...
Total: 5.36s

[Epoch 201]	Learning rate: 3.13e-6
[1600/15906]	[L1: 13.3360]	38.2+1.0s
[3200/15906]	[L1: 13.2191]	37.8+0.1s
[4800/15906]	[L1: 13.2375]	36.9+0.1s
[6400/15906]	[L1: 13.0920]	37.4+0.1s
[8000/15906]	[L1: 12.9955]	36.9+0.1s
[9600/15906]	[L1: 12.9713]	38.0+0.1s
[11200/15906]	[L1: 12.9466]	37.6+0.1s
[12800/15906]	[L1: 12.9611]	37.4+0.1s
[14400/15906]	[L1: 12.9793]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.521 (Best: 18.056 @epoch 194)
Forward: 2.08s

Saving...
Total: 5.47s

[Epoch 202]	Learning rate: 6.25e-6
[1600/15906]	[L1: 13.0352]	37.7+1.0s
[3200/15906]	[L1: 13.1495]	37.0+0.1s
[4800/15906]	[L1: 13.1628]	37.5+0.1s
[6400/15906]	[L1: 13.0882]	36.7+0.1s
[8000/15906]	[L1: 13.0606]	36.4+0.1s
[9600/15906]	[L1: 13.0837]	37.4+0.1s
[11200/15906]	[L1: 13.0297]	36.9+0.1s
[12800/15906]	[L1: 13.0185]	37.1+0.1s
[14400/15906]	[L1: 12.9922]	37.5+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.656 (Best: 18.056 @epoch 194)
Forward: 2.18s

Saving...
Total: 5.58s

[Epoch 203]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.1563]	37.8+0.8s
[3200/15906]	[L1: 12.5498]	37.4+0.1s
[4800/15906]	[L1: 12.6034]	36.8+0.1s
[6400/15906]	[L1: 12.7270]	36.8+0.1s
[8000/15906]	[L1: 12.7239]	37.5+0.1s
[9600/15906]	[L1: 12.6969]	37.4+0.1s
[11200/15906]	[L1: 12.7031]	37.7+0.1s
[12800/15906]	[L1: 12.6560]	37.0+0.1s
[14400/15906]	[L1: 12.6106]	36.7+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.452 (Best: 18.056 @epoch 194)
Forward: 2.07s

Saving...
Total: 5.50s

[Epoch 204]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.7100]	38.7+0.8s
[3200/15906]	[L1: 12.5293]	36.8+0.1s
[4800/15906]	[L1: 12.5620]	37.0+0.1s
[6400/15906]	[L1: 12.5360]	36.7+0.1s
[8000/15906]	[L1: 12.6170]	36.9+0.1s
[9600/15906]	[L1: 12.6290]	36.8+0.1s
[11200/15906]	[L1: 12.6483]	37.3+0.1s
[12800/15906]	[L1: 12.7175]	37.5+0.1s
[14400/15906]	[L1: 12.7542]	37.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.427 (Best: 18.056 @epoch 194)
Forward: 2.08s

Saving...
Total: 5.47s

[Epoch 205]	Learning rate: 6.25e-6
[1600/15906]	[L1: 13.1235]	37.7+0.9s
[3200/15906]	[L1: 12.9785]	37.1+0.1s
[4800/15906]	[L1: 12.8848]	37.9+0.1s
[6400/15906]	[L1: 12.8998]	38.1+0.1s
[8000/15906]	[L1: 12.9243]	37.8+0.1s
[9600/15906]	[L1: 12.9533]	37.4+0.1s
[11200/15906]	[L1: 12.8664]	37.0+0.1s
[12800/15906]	[L1: 12.8555]	37.1+0.1s
[14400/15906]	[L1: 12.8572]	36.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.607 (Best: 18.056 @epoch 194)
Forward: 1.94s

Saving...
Total: 5.36s

[Epoch 206]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.3077]	37.7+0.8s
[3200/15906]	[L1: 12.4476]	37.2+0.1s
[4800/15906]	[L1: 12.5056]	36.7+0.1s
[6400/15906]	[L1: 12.6879]	37.4+0.1s
[8000/15906]	[L1: 12.6419]	37.5+0.1s
[9600/15906]	[L1: 12.6382]	37.0+0.1s
[11200/15906]	[L1: 12.6942]	36.8+0.1s
[12800/15906]	[L1: 12.6930]	37.4+0.1s
[14400/15906]	[L1: 12.7275]	37.5+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.462 (Best: 18.056 @epoch 194)
Forward: 2.10s

Saving...
Total: 5.47s

[Epoch 207]	Learning rate: 6.25e-6
[1600/15906]	[L1: 13.0282]	37.1+1.0s
[3200/15906]	[L1: 12.8743]	37.2+0.1s
[4800/15906]	[L1: 12.7132]	37.7+0.1s
[6400/15906]	[L1: 12.7928]	37.1+0.1s
[8000/15906]	[L1: 12.7301]	37.0+0.1s
[9600/15906]	[L1: 12.7566]	37.0+0.1s
[11200/15906]	[L1: 12.7051]	37.6+0.1s
[12800/15906]	[L1: 12.7158]	37.4+0.1s
[14400/15906]	[L1: 12.6535]	36.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.752 (Best: 18.056 @epoch 194)
Forward: 2.14s

Saving...
Total: 5.52s

[Epoch 208]	Learning rate: 6.25e-6
[1600/15906]	[L1: 13.0698]	37.6+0.9s
[3200/15906]	[L1: 12.8982]	36.6+0.1s
[4800/15906]	[L1: 12.8938]	37.2+0.1s
[6400/15906]	[L1: 12.9067]	36.6+0.1s
[8000/15906]	[L1: 12.9567]	36.4+0.1s
[9600/15906]	[L1: 12.9850]	37.0+0.1s
[11200/15906]	[L1: 12.9468]	36.5+0.1s
[12800/15906]	[L1: 12.8970]	36.4+0.1s
[14400/15906]	[L1: 12.9204]	37.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.231 (Best: 18.056 @epoch 194)
Forward: 1.91s

Saving...
Total: 5.33s

[Epoch 209]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.5157]	37.3+0.8s
[3200/15906]	[L1: 12.5531]	36.7+0.1s
[4800/15906]	[L1: 12.8233]	36.7+0.1s
[6400/15906]	[L1: 12.8409]	36.9+0.1s
[8000/15906]	[L1: 12.7379]	37.3+0.1s
[9600/15906]	[L1: 12.6878]	36.6+0.1s
[11200/15906]	[L1: 12.7388]	37.0+0.1s
[12800/15906]	[L1: 12.7326]	37.2+0.1s
[14400/15906]	[L1: 12.7843]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.396 (Best: 18.056 @epoch 194)
Forward: 1.92s

Saving...
Total: 5.32s

[Epoch 210]	Learning rate: 6.25e-6
[1600/15906]	[L1: 13.0634]	37.0+1.1s
[3200/15906]	[L1: 13.0325]	36.8+0.1s
[4800/15906]	[L1: 12.9197]	37.3+0.1s
[6400/15906]	[L1: 12.8799]	37.5+0.1s
[8000/15906]	[L1: 12.9622]	36.7+0.1s
[9600/15906]	[L1: 12.9402]	36.8+0.1s
[11200/15906]	[L1: 12.8961]	37.5+0.1s
[12800/15906]	[L1: 12.9113]	36.7+0.1s
[14400/15906]	[L1: 12.8560]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.218 (Best: 18.056 @epoch 194)
Forward: 2.35s

Saving...
Total: 6.73s

[Epoch 211]	Learning rate: 6.25e-6
[1600/15906]	[L1: 13.2228]	37.9+0.9s
[3200/15906]	[L1: 12.8926]	37.4+0.1s
[4800/15906]	[L1: 12.8704]	36.4+0.1s
[6400/15906]	[L1: 12.8078]	36.7+0.1s
[8000/15906]	[L1: 12.8528]	36.9+0.1s
[9600/15906]	[L1: 12.7508]	36.3+0.1s
[11200/15906]	[L1: 12.7132]	37.0+0.1s
[12800/15906]	[L1: 12.7286]	37.6+0.1s
[14400/15906]	[L1: 12.7512]	36.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.480 (Best: 18.056 @epoch 194)
Forward: 1.83s

Saving...
Total: 5.24s

[Epoch 212]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.6547]	37.3+1.0s
[3200/15906]	[L1: 12.7450]	36.7+0.1s
[4800/15906]	[L1: 12.7704]	36.8+0.1s
[6400/15906]	[L1: 12.7463]	37.0+0.1s
[8000/15906]	[L1: 12.7406]	36.5+0.1s
[9600/15906]	[L1: 12.7912]	36.8+0.1s
[11200/15906]	[L1: 12.7313]	36.7+0.1s
[12800/15906]	[L1: 12.7488]	36.8+0.1s
[14400/15906]	[L1: 12.7266]	37.4+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.358 (Best: 18.056 @epoch 194)
Forward: 1.99s

Saving...
Total: 5.38s

[Epoch 213]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.7716]	37.6+0.9s
[3200/15906]	[L1: 12.6929]	36.2+0.1s
[4800/15906]	[L1: 12.6680]	36.8+0.1s
[6400/15906]	[L1: 12.8064]	37.6+0.1s
[8000/15906]	[L1: 12.8635]	37.1+0.1s
[9600/15906]	[L1: 12.7692]	36.9+0.1s
[11200/15906]	[L1: 12.7637]	36.6+0.1s
[12800/15906]	[L1: 12.7459]	36.8+0.1s
[14400/15906]	[L1: 12.7704]	36.7+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.406 (Best: 18.056 @epoch 194)
Forward: 2.33s

Saving...
Total: 5.73s

[Epoch 214]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.3162]	37.6+1.2s
[3200/15906]	[L1: 12.5389]	36.8+0.1s
[4800/15906]	[L1: 12.6309]	36.8+0.1s
[6400/15906]	[L1: 12.6920]	37.0+0.1s
[8000/15906]	[L1: 12.6700]	37.3+0.1s
[9600/15906]	[L1: 12.6554]	36.7+0.1s
[11200/15906]	[L1: 12.6513]	37.7+0.1s
[12800/15906]	[L1: 12.7433]	36.8+0.1s
[14400/15906]	[L1: 12.7559]	37.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.633 (Best: 18.056 @epoch 194)
Forward: 1.93s

Saving...
Total: 5.32s

[Epoch 215]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.8783]	38.8+0.8s
[3200/15906]	[L1: 12.8123]	36.9+0.1s
[4800/15906]	[L1: 12.8698]	37.1+0.1s
[6400/15906]	[L1: 12.7851]	36.4+0.1s
[8000/15906]	[L1: 12.8022]	37.3+0.1s
[9600/15906]	[L1: 12.7806]	37.0+0.2s
[11200/15906]	[L1: 12.7921]	36.7+0.1s
[12800/15906]	[L1: 12.8010]	37.6+0.1s
[14400/15906]	[L1: 12.8453]	37.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.640 (Best: 18.056 @epoch 194)
Forward: 2.09s

Saving...
Total: 5.47s

[Epoch 216]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.9454]	37.0+1.1s
[3200/15906]	[L1: 12.7245]	37.4+0.1s
[4800/15906]	[L1: 12.7333]	37.3+0.1s
[6400/15906]	[L1: 12.8281]	37.1+0.1s
[8000/15906]	[L1: 12.7607]	37.3+0.1s
[9600/15906]	[L1: 12.7572]	36.6+0.1s
[11200/15906]	[L1: 12.7754]	37.2+0.1s
[12800/15906]	[L1: 12.7663]	37.3+0.1s
[14400/15906]	[L1: 12.7182]	37.3+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.445 (Best: 18.056 @epoch 194)
Forward: 1.84s

Saving...
Total: 5.28s

[Epoch 217]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.3794]	37.5+0.8s
[3200/15906]	[L1: 12.5585]	37.0+0.1s
[4800/15906]	[L1: 12.5492]	37.1+0.1s
[6400/15906]	[L1: 12.5740]	37.7+0.1s
[8000/15906]	[L1: 12.5941]	36.8+0.1s
[9600/15906]	[L1: 12.6390]	36.3+0.1s
[11200/15906]	[L1: 12.6464]	36.8+0.1s
[12800/15906]	[L1: 12.6605]	36.8+0.1s
[14400/15906]	[L1: 12.6825]	37.1+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.674 (Best: 18.056 @epoch 194)
Forward: 2.11s

Saving...
Total: 5.52s

[Epoch 218]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.3874]	38.1+0.9s
[3200/15906]	[L1: 12.3202]	37.6+0.1s
[4800/15906]	[L1: 12.4563]	36.9+0.1s
[6400/15906]	[L1: 12.7231]	37.7+0.1s
[8000/15906]	[L1: 12.7032]	37.6+0.1s
[9600/15906]	[L1: 12.7575]	36.9+0.1s
[11200/15906]	[L1: 12.7352]	37.3+0.1s
[12800/15906]	[L1: 12.6594]	37.5+0.1s
[14400/15906]	[L1: 12.6565]	37.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.692 (Best: 18.056 @epoch 194)
Forward: 1.80s

Saving...
Total: 5.20s

[Epoch 219]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.5785]	37.1+0.9s
[3200/15906]	[L1: 12.5941]	36.2+0.1s
[4800/15906]	[L1: 12.6014]	37.3+0.1s
[6400/15906]	[L1: 12.5462]	37.3+0.1s
[8000/15906]	[L1: 12.5556]	36.8+0.1s
[9600/15906]	[L1: 12.6171]	36.7+0.1s
[11200/15906]	[L1: 12.6061]	37.5+0.1s
[12800/15906]	[L1: 12.6173]	37.4+0.1s
[14400/15906]	[L1: 12.6780]	36.8+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.496 (Best: 18.056 @epoch 194)
Forward: 1.82s

Saving...
Total: 5.25s

[Epoch 220]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.9942]	37.2+1.1s
[3200/15906]	[L1: 12.8418]	36.8+0.1s
[4800/15906]	[L1: 12.8697]	36.8+0.1s
[6400/15906]	[L1: 12.8142]	37.5+0.1s
[8000/15906]	[L1: 12.8792]	36.6+0.1s
[9600/15906]	[L1: 12.8428]	36.9+0.1s
[11200/15906]	[L1: 12.8666]	36.8+0.1s
[12800/15906]	[L1: 12.8693]	36.6+0.1s
[14400/15906]	[L1: 12.8769]	37.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.675 (Best: 18.056 @epoch 194)
Forward: 1.92s

Saving...
Total: 5.32s

[Epoch 221]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.9512]	38.0+0.9s
[3200/15906]	[L1: 12.7055]	37.3+0.1s
[4800/15906]	[L1: 12.7123]	36.4+0.1s
[6400/15906]	[L1: 12.6871]	36.6+0.1s
[8000/15906]	[L1: 12.6819]	36.9+0.1s
[9600/15906]	[L1: 12.7042]	37.4+0.1s
[11200/15906]	[L1: 12.7708]	36.6+0.1s
[12800/15906]	[L1: 12.7769]	37.7+0.1s
[14400/15906]	[L1: 12.7985]	36.7+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.477 (Best: 18.056 @epoch 194)
Forward: 1.79s

Saving...
Total: 5.22s

[Epoch 222]	Learning rate: 6.25e-6
[1600/15906]	[L1: 13.0185]	37.6+1.1s
[3200/15906]	[L1: 13.0251]	36.4+0.2s
[4800/15906]	[L1: 13.0259]	37.7+0.1s
[6400/15906]	[L1: 12.9505]	36.9+0.1s
[8000/15906]	[L1: 12.8575]	37.4+0.1s
[9600/15906]	[L1: 12.8278]	37.5+0.1s
[11200/15906]	[L1: 12.7955]	36.4+0.1s
[12800/15906]	[L1: 12.7764]	36.7+0.1s
[14400/15906]	[L1: 12.7566]	37.4+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.543 (Best: 18.056 @epoch 194)
Forward: 1.99s

Saving...
Total: 5.40s

[Epoch 223]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.5547]	37.1+0.8s
[3200/15906]	[L1: 12.4692]	37.0+0.1s
[4800/15906]	[L1: 12.4480]	37.3+0.1s
[6400/15906]	[L1: 12.5617]	37.4+0.1s
[8000/15906]	[L1: 12.5484]	37.0+0.1s
[9600/15906]	[L1: 12.6231]	37.0+0.1s
[11200/15906]	[L1: 12.6121]	37.1+0.1s
[12800/15906]	[L1: 12.6384]	37.7+0.1s
[14400/15906]	[L1: 12.6695]	36.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.692 (Best: 18.056 @epoch 194)
Forward: 1.97s

Saving...
Total: 5.40s

[Epoch 224]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.6836]	38.3+0.9s
[3200/15906]	[L1: 12.6608]	37.2+0.1s
[4800/15906]	[L1: 12.5323]	37.3+0.1s
[6400/15906]	[L1: 12.7082]	37.0+0.1s
[8000/15906]	[L1: 12.7603]	36.8+0.1s
[9600/15906]	[L1: 12.7118]	37.2+0.1s
[11200/15906]	[L1: 12.7536]	36.6+0.1s
[12800/15906]	[L1: 12.7790]	36.6+0.1s
[14400/15906]	[L1: 12.7749]	37.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.771 (Best: 18.056 @epoch 194)
Forward: 1.83s

Saving...
Total: 5.26s

[Epoch 225]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.5615]	37.1+0.9s
[3200/15906]	[L1: 12.5070]	37.4+0.1s
[4800/15906]	[L1: 12.5462]	37.5+0.1s
[6400/15906]	[L1: 12.6436]	37.8+0.1s
[8000/15906]	[L1: 12.6163]	36.8+0.1s
[9600/15906]	[L1: 12.6065]	37.7+0.1s
[11200/15906]	[L1: 12.6388]	37.0+0.1s
[12800/15906]	[L1: 12.6939]	36.7+0.1s
[14400/15906]	[L1: 12.6974]	38.0+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.680 (Best: 18.056 @epoch 194)
Forward: 2.19s

Saving...
Total: 5.58s

[Epoch 226]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.8720]	37.2+1.2s
[3200/15906]	[L1: 12.6780]	37.2+0.1s
[4800/15906]	[L1: 12.4886]	38.2+0.1s
[6400/15906]	[L1: 12.5076]	37.4+0.1s
[8000/15906]	[L1: 12.5441]	37.3+0.1s
[9600/15906]	[L1: 12.6282]	37.6+0.1s
[11200/15906]	[L1: 12.6500]	37.4+0.1s
[12800/15906]	[L1: 12.6949]	36.7+0.1s
[14400/15906]	[L1: 12.6807]	37.0+0.2s

Evaluation:
[SRRAW x8]	PSNR: 17.441 (Best: 18.056 @epoch 194)
Forward: 2.15s

Saving...
Total: 5.55s

[Epoch 227]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.5109]	37.5+0.8s
[3200/15906]	[L1: 12.6416]	37.5+0.1s
[4800/15906]	[L1: 12.6566]	36.9+0.1s
[6400/15906]	[L1: 12.6369]	37.2+0.1s
[8000/15906]	[L1: 12.6945]	37.1+0.1s
[9600/15906]	[L1: 12.6982]	37.3+0.1s
[11200/15906]	[L1: 12.7224]	37.2+0.1s
[12800/15906]	[L1: 12.7212]	37.3+0.1s
[14400/15906]	[L1: 12.7413]	37.5+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.710 (Best: 18.056 @epoch 194)
Forward: 1.95s

Saving...
Total: 5.37s

[Epoch 228]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.3631]	37.2+1.0s
[3200/15906]	[L1: 12.5149]	37.8+0.1s
[4800/15906]	[L1: 12.5342]	36.2+0.1s
[6400/15906]	[L1: 12.4931]	38.0+0.1s
[8000/15906]	[L1: 12.4612]	37.0+0.1s
[9600/15906]	[L1: 12.4946]	37.1+0.1s
[11200/15906]	[L1: 12.5351]	36.5+0.1s
[12800/15906]	[L1: 12.5500]	36.7+0.1s
[14400/15906]	[L1: 12.5430]	36.9+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.618 (Best: 18.056 @epoch 194)
Forward: 2.08s

Saving...
Total: 5.48s

[Epoch 229]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.7991]	38.4+0.9s
[3200/15906]	[L1: 12.8350]	36.7+0.1s
[4800/15906]	[L1: 12.7304]	37.0+0.2s
[6400/15906]	[L1: 12.7140]	36.5+0.1s
[8000/15906]	[L1: 12.7011]	37.0+0.1s
[9600/15906]	[L1: 12.6401]	36.9+0.1s
[11200/15906]	[L1: 12.6114]	36.6+0.1s
[12800/15906]	[L1: 12.6382]	37.1+0.1s
[14400/15906]	[L1: 12.6583]	37.2+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.671 (Best: 18.056 @epoch 194)
Forward: 2.10s

Saving...
Total: 5.52s

[Epoch 230]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.5302]	37.7+1.1s
[3200/15906]	[L1: 12.6704]	36.8+0.1s
[4800/15906]	[L1: 12.6741]	37.2+0.1s
[6400/15906]	[L1: 12.6196]	36.7+0.1s
[8000/15906]	[L1: 12.7266]	37.3+0.1s
[9600/15906]	[L1: 12.6697]	37.3+0.1s
[11200/15906]	[L1: 12.6893]	36.7+0.1s
[12800/15906]	[L1: 12.7044]	37.1+0.1s
[14400/15906]	[L1: 12.6615]	37.4+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.588 (Best: 18.056 @epoch 194)
Forward: 2.20s

Saving...
Total: 5.58s

[Epoch 231]	Learning rate: 6.25e-6
[1600/15906]	[L1: 13.0706]	37.3+1.0s
[3200/15906]	[L1: 12.7645]	37.3+0.1s
[4800/15906]	[L1: 12.7443]	37.6+0.1s
[6400/15906]	[L1: 12.7512]	38.3+0.1s
[8000/15906]	[L1: 12.6888]	38.0+0.1s
[9600/15906]	[L1: 12.7244]	37.5+0.1s
[11200/15906]	[L1: 12.7456]	37.4+0.1s
[12800/15906]	[L1: 12.6846]	37.2+0.1s
[14400/15906]	[L1: 12.7084]	37.6+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.732 (Best: 18.056 @epoch 194)
Forward: 1.81s

Saving...
Total: 5.21s

[Epoch 232]	Learning rate: 6.25e-6
[1600/15906]	[L1: 12.4248]	37.8+1.0s
[3200/15906]	[L1: 12.4604]	37.5+0.1s
[4800/15906]	[L1: 12.5108]	37.0+0.1s
[6400/15906]	[L1: 12.5810]	36.9+0.2s
[8000/15906]	[L1: 12.4908]	37.7+0.2s
[9600/15906]	[L1: 12.4812]	37.7+0.1s
[11200/15906]	[L1: 12.5104]	37.4+0.1s
[12800/15906]	[L1: 12.4879]	36.8+0.1s
[14400/15906]	[L1: 12.5092]	37.7+0.1s

Evaluation:
[SRRAW x8]	PSNR: 17.843 (Best: 18.056 @epoch 194)
Forward: 2.14s

Saving...
Total: 5.59s

